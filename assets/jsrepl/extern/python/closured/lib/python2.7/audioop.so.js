(function(g){function e(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g,h;d=a;e=b;f=8;h=0;c=4;break;case 1:c=HEAP[e]>=d;e+=2;var j=h;c=c!=0?2:3;break;case 2:g=j&65535;c=6;break;case 3:h=j+1;c=4;break;case 4:c=h<f?1:5;break;case 5:g=f&65535;c=6;break;case 6:return d=g,d&65535;default:assert(0,"bad label: "+c)}}function b(a){var b;for(b=-1;;)switch(b){case -1:var c;b=a;b=b==1|b==2|b==4?2:1;break;case 1:_PyErr_SetString(HEAP[o],p);c=0;b=
3;break;case 2:c=1;b=3;break;case 3:return a=c;default:assert(0,"bad label: "+b)}}function a(a,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g;e=a;f=c;d=b(f)==0?1:2;break;case 1:g=0;d=5;break;case 2:d=e%f!=0?3:4;break;case 3:_PyErr_SetString(HEAP[o],q);g=0;d=5;break;case 4:g=1;d=5;break;case 5:return d=g;default:assert(0,"bad label: "+d)}}function c(a,b,c){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h,j;e=a;f=b;g=c;h=j=0;d=h<g?1:2;break;case 1:j=HEAP[e+2*h]*HEAP[f+2*h]+j;h+=1;d=h<g?1:2;break;case 2:return a=
j;default:assert(0,"bad label: "+d)}}function d(){h=allocate([31,0,63,0,127,0,255,0,511,0,1023,0,2047,0,4095,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_NORMAL);j=allocate([63,0,127,0,255,0,511,0,1023,0,2047,0,4095,0,8191,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_NORMAL);k=allocate([-32124,0,-31100,0,-30076,0,-29052,0,-28028,0,-27004,0,-25980,0,-24956,0,-23932,0,-22908,0,-21884,0,-20860,0,-19836,0,-18812,0,-17788,0,-16764,0,-15996,0,
-15484,0,-14972,0,-14460,0,-13948,0,-13436,0,-12924,0,-12412,0,-11900,0,-11388,0,-10876,0,-10364,0,-9852,0,-9340,0,-8828,0,-8316,0,-7932,0,-7676,0,-7420,0,-7164,0,-6908,0,-6652,0,-6396,0,-6140,0,-5884,0,-5628,0,-5372,0,-5116,0,-4860,0,-4604,0,-4348,0,-4092,0,-3900,0,-3772,0,-3644,0,-3516,0,-3388,0,-3260,0,-3132,0,-3004,0,-2876,0,-2748,0,-2620,0,-2492,0,-2364,0,-2236,0,-2108,0,-1980,0,-1884,0,-1820,0,-1756,0,-1692,0,-1628,0,-1564,0,-1500,0,-1436,0,-1372,0,-1308,0,-1244,0,-1180,0,-1116,0,-1052,0,-988,
0,-924,0,-876,0,-844,0,-812,0,-780,0,-748,0,-716,0,-684,0,-652,0,-620,0,-588,0,-556,0,-524,0,-492,0,-460,0,-428,0,-396,0,-372,0,-356,0,-340,0,-324,0,-308,0,-292,0,-276,0,-260,0,-244,0,-228,0,-212,0,-196,0,-180,0,-164,0,-148,0,-132,0,-120,0,-112,0,-104,0,-96,0,-88,0,-80,0,-72,0,-64,0,-56,0,-48,0,-40,0,-32,0,-24,0,-16,0,-8,0,0,0,32124,0,31100,0,30076,0,29052,0,28028,0,27004,0,25980,0,24956,0,23932,0,22908,0,21884,0,20860,0,19836,0,18812,0,17788,0,16764,0,15996,0,15484,0,14972,0,14460,0,13948,0,13436,
0,12924,0,12412,0,11900,0,11388,0,10876,0,10364,0,9852,0,9340,0,8828,0,8316,0,7932,0,7676,0,7420,0,7164,0,6908,0,6652,0,6396,0,6140,0,5884,0,5628,0,5372,0,5116,0,4860,0,4604,0,4348,0,4092,0,3900,0,3772,0,3644,0,3516,0,3388,0,3260,0,3132,0,3004,0,2876,0,2748,0,2620,0,2492,0,2364,0,2236,0,2108,0,1980,0,1884,0,1820,0,1756,0,1692,0,1628,0,1564,0,1500,0,1436,0,1372,0,1308,0,1244,0,1180,0,1116,0,1052,0,988,0,924,0,876,0,844,0,812,0,780,0,748,0,716,0,684,0,652,0,620,0,588,0,556,0,524,0,492,0,460,0,428,0,
396,0,372,0,356,0,340,0,324,0,308,0,292,0,276,0,260,0,244,0,228,0,212,0,196,0,180,0,164,0,148,0,132,0,120,0,112,0,104,0,96,0,88,0,80,0,72,0,64,0,56,0,48,0,40,0,32,0,24,0,16,0,8,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_NORMAL);l=allocate([-5504,0,-5248,0,-6016,0,-5760,0,-4480,0,-4224,0,-4992,0,-4736,0,-7552,0,-7296,0,-8064,0,-7808,0,-6528,0,-6272,0,-7040,0,-6784,0,-2752,0,-2624,0,-3008,0,-2880,0,-2240,0,-2112,0,-2496,0,-2368,0,-3776,0,-3648,0,-4032,0,-3904,0,-3264,0,-3136,0,-3520,0,-3392,0,
-22016,0,-20992,0,-24064,0,-23040,0,-17920,0,-16896,0,-19968,0,-18944,0,-30208,0,-29184,0,-32256,0,-31232,0,-26112,0,-25088,0,-28160,0,-27136,0,-11008,0,-10496,0,-12032,0,-11520,0,-8960,0,-8448,0,-9984,0,-9472,0,-15104,0,-14592,0,-16128,0,-15616,0,-13056,0,-12544,0,-14080,0,-13568,0,-344,0,-328,0,-376,0,-360,0,-280,0,-264,0,-312,0,-296,0,-472,0,-456,0,-504,0,-488,0,-408,0,-392,0,-440,0,-424,0,-88,0,-72,0,-120,0,-104,0,-24,0,-8,0,-56,0,-40,0,-216,0,-200,0,-248,0,-232,0,-152,0,-136,0,-184,0,-168,0,
-1376,0,-1312,0,-1504,0,-1440,0,-1120,0,-1056,0,-1248,0,-1184,0,-1888,0,-1824,0,-2016,0,-1952,0,-1632,0,-1568,0,-1760,0,-1696,0,-688,0,-656,0,-752,0,-720,0,-560,0,-528,0,-624,0,-592,0,-944,0,-912,0,-1008,0,-976,0,-816,0,-784,0,-880,0,-848,0,5504,0,5248,0,6016,0,5760,0,4480,0,4224,0,4992,0,4736,0,7552,0,7296,0,8064,0,7808,0,6528,0,6272,0,7040,0,6784,0,2752,0,2624,0,3008,0,2880,0,2240,0,2112,0,2496,0,2368,0,3776,0,3648,0,4032,0,3904,0,3264,0,3136,0,3520,0,3392,0,22016,0,20992,0,24064,0,23040,0,17920,
0,16896,0,19968,0,18944,0,30208,0,29184,0,32256,0,31232,0,26112,0,25088,0,28160,0,27136,0,11008,0,10496,0,12032,0,11520,0,8960,0,8448,0,9984,0,9472,0,15104,0,14592,0,16128,0,15616,0,13056,0,12544,0,14080,0,13568,0,344,0,328,0,376,0,360,0,280,0,264,0,312,0,296,0,472,0,456,0,504,0,488,0,408,0,392,0,440,0,424,0,88,0,72,0,120,0,104,0,24,0,8,0,56,0,40,0,216,0,200,0,248,0,232,0,152,0,136,0,184,0,168,0,1376,0,1312,0,1504,0,1440,0,1120,0,1056,0,1248,0,1184,0,1888,0,1824,0,2016,0,1952,0,1632,0,1568,0,1760,
0,1696,0,688,0,656,0,752,0,720,0,560,0,528,0,624,0,592,0,944,0,912,0,1008,0,976,0,816,0,784,0,880,0,848,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_NORMAL);m=allocate([-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_NORMAL);
n=allocate([7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,16,0,0,0,17,0,0,0,19,0,0,0,21,0,0,0,23,0,0,0,25,0,0,0,28,0,0,0,31,0,0,0,34,0,0,0,37,0,0,0,41,0,0,0,45,0,0,0,50,0,0,0,55,0,0,0,60,0,0,0,66,0,0,0,73,0,0,0,80,0,0,0,88,0,0,0,97,0,0,0,107,0,0,0,118,0,0,0,130,0,0,0,143,0,0,0,157,0,0,0,173,0,0,0,190,0,0,0,209,0,0,0,230,0,0,0,253,0,0,0,279,0,0,0,307,0,0,0,337,0,0,0,371,0,0,0,408,0,0,0,449,0,0,0,494,0,0,0,544,0,0,0,598,0,0,0,658,0,0,0,724,0,0,0,796,0,0,0,876,0,0,0,963,0,0,0,
1060,0,0,0,1166,0,0,0,1282,0,0,0,1411,0,0,0,1552,0,0,0,1707,0,0,0,1878,0,0,0,2066,0,0,0,2272,0,0,0,2499,0,0,0,2749,0,0,0,3024,0,0,0,3327,0,0,0,3660,0,0,0,4026,0,0,0,4428,0,0,0,4871,0,0,0,5358,0,0,0,5894,0,0,0,6484,0,0,0,7132,0,0,0,7845,0,0,0,8630,0,0,0,9493,0,0,0,10442,0,0,0,11487,0,0,0,12635,0,0,0,13899,0,0,0,15289,0,0,0,16818,0,0,0,18500,0,0,0,20350,0,0,0,22385,0,0,0,24623,0,0,0,27086,0,0,0,29794,0,0,0,32767,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,
0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_NORMAL);
o=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);p=allocate([83,105,122,101,32,115,104,111,117,108,100,32,98,101,32,49,44,32,50,32,111,114,32,52,0],"i8",ALLOC_NORMAL);q=allocate([110,111,116,32,97,32,119,104,111,108,101,32,110,117,109,98,101,114,32,111,102,32,102,114,97,109,101,115,0],"i8",ALLOC_NORMAL);r=allocate([115,35,105,105,58,103,101,116,115,97,109,112,108,101,0],"i8",ALLOC_NORMAL);t=allocate([73,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0],"i8",ALLOC_NORMAL);s=allocate([115,
35,105,58,109,97,120,0],"i8",ALLOC_NORMAL);u=allocate([115,35,105,58,109,105,110,109,97,120,0],"i8",ALLOC_NORMAL);v=allocate([40,105,105,41,0],"i8",ALLOC_NORMAL);w=allocate([115,35,105,58,97,118,103,0],"i8",ALLOC_NORMAL);x=allocate([115,35,105,58,114,109,115,0],"i8",ALLOC_NORMAL);y=allocate([115,35,115,35,58,102,105,110,100,102,105,116,0],"i8",ALLOC_NORMAL);B=allocate([83,116,114,105,110,103,115,32,115,104,111,117,108,100,32,98,101,32,101,118,101,110,45,115,105,122,101,100,0],"i8",ALLOC_NORMAL);A=
allocate([70,105,114,115,116,32,115,97,109,112,108,101,32,115,104,111,117,108,100,32,98,101,32,108,111,110,103,101,114,0],"i8",ALLOC_NORMAL);C=allocate([40,105,102,41,0],"i8",ALLOC_NORMAL);G=allocate([115,35,115,35,58,102,105,110,100,102,97,99,116,111,114,0],"i8",ALLOC_NORMAL);F=allocate([83,97,109,112,108,101,115,32,115,104,111,117,108,100,32,98,101,32,115,97,109,101,32,115,105,122,101,0],"i8",ALLOC_NORMAL);E=allocate([115,35,105,58,102,105,110,100,109,97,120,0],"i8",ALLOC_NORMAL);N=allocate([73,
110,112,117,116,32,115,97,109,112,108,101,32,115,104,111,117,108,100,32,98,101,32,108,111,110,103,101,114,0],"i8",ALLOC_NORMAL);Q=allocate([115,35,105,58,97,118,103,112,112,0],"i8",ALLOC_NORMAL);I=allocate([115,35,105,58,109,97,120,112,112,0],"i8",ALLOC_NORMAL);J=allocate([115,35,105,58,99,114,111,115,115,0],"i8",ALLOC_NORMAL);P=allocate([115,35,105,100,58,109,117,108,0],"i8",ALLOC_NORMAL);D=allocate([115,35,105,100,100,58,116,111,109,111,110,111,0],"i8",ALLOC_NORMAL);T=allocate([115,35,105,100,100,
58,116,111,115,116,101,114,101,111,0],"i8",ALLOC_NORMAL);L=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,111,117,116,112,117,116,32,98,117,102,102,101,114,0],"i8",ALLOC_NORMAL);$=allocate([115,35,115,35,105,58,97,100,100,0],"i8",ALLOC_NORMAL);R=allocate([76,101,110,103,116,104,115,32,115,104,111,117,108,100,32,98,101,32,116,104,101,32,115,97,109,101,0],"i8",ALLOC_NORMAL);K=allocate([115,35,105,105,58,98,105,97,115,0],"i8",ALLOC_NORMAL);H=allocate([115,
35,105,58,114,101,118,101,114,115,101,0],"i8",ALLOC_NORMAL);S=allocate([115,35,105,105,58,108,105,110,50,108,105,110,0],"i8",ALLOC_NORMAL);U=allocate([115,35,105,105,105,105,79,124,105,105,58,114,97,116,101,99,118,0],"i8",ALLOC_NORMAL);z=allocate([35,32,111,102,32,99,104,97,110,110,101,108,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,49,0],"i8",ALLOC_NORMAL);aa=allocate([119,105,100,116,104,32,42,32,110,99,104,97,110,110,101,108,115,32,116,111,111,32,98,105,103,32,102,111,114,32,97,32,67,
32,105,110,116,0],"i8",ALLOC_NORMAL);ja=allocate([119,101,105,103,104,116,65,32,115,104,111,117,108,100,32,98,101,32,62,61,32,49,44,32,119,101,105,103,104,116,66,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,0],"i8",ALLOC_NORMAL);la=allocate([115,97,109,112,108,105,110,103,32,114,97,116,101,32,110,111,116,32,62,32,48,0],"i8",ALLOC_NORMAL);da=allocate([105,79,33,59,97,117,100,105,111,111,112,46,114,97,116,101,99,118,58,32,105,108,108,101,103,97,108,32,115,116,97,116,101,32,97,114,103,117,109,
101,110,116,0],"i8",ALLOC_NORMAL);Ka=allocate([105,108,108,101,103,97,108,32,115,116,97,116,101,32,97,114,103,117,109,101,110,116,0],"i8",ALLOC_NORMAL);Ma=allocate([105,105,58,114,97,116,101,99,118,0],"i8",ALLOC_NORMAL);wa=allocate(1,"i8",ALLOC_NORMAL);ib=allocate([40,79,40,105,79,41,41,0],"i8",ALLOC_NORMAL);cb=allocate([115,35,105,58,108,105,110,50,117,108,97,119,0],"i8",ALLOC_NORMAL);db=allocate([115,35,105,58,117,108,97,119,50,108,105,110,0],"i8",ALLOC_NORMAL);Da=allocate([115,35,105,58,108,105,
110,50,97,108,97,119,0],"i8",ALLOC_NORMAL);gb=allocate([115,35,105,58,97,108,97,119,50,108,105,110,0],"i8",ALLOC_NORMAL);Xa=allocate([115,35,105,79,58,108,105,110,50,97,100,112,99,109,0],"i8",ALLOC_NORMAL);Ca=allocate([105,105,0],"i8",ALLOC_NORMAL);Za=allocate([40,79,40,105,105,41,41,0],"i8",ALLOC_NORMAL);Va=allocate([115,35,105,79,58,97,100,112,99,109,50,108,105,110,0],"i8",ALLOC_NORMAL);Ga=allocate([109,97,120,0],"i8",ALLOC_NORMAL);ha=allocate([109,105,110,109,97,120,0],"i8",ALLOC_NORMAL);Na=allocate([97,
118,103,0],"i8",ALLOC_NORMAL);jb=allocate([109,97,120,112,112,0],"i8",ALLOC_NORMAL);hb=allocate([97,118,103,112,112,0],"i8",ALLOC_NORMAL);Qa=allocate([114,109,115,0],"i8",ALLOC_NORMAL);Ha=allocate([102,105,110,100,102,105,116,0],"i8",ALLOC_NORMAL);Ra=allocate([102,105,110,100,109,97,120,0],"i8",ALLOC_NORMAL);Ia=allocate([102,105,110,100,102,97,99,116,111,114,0],"i8",ALLOC_NORMAL);Fa=allocate([99,114,111,115,115,0],"i8",ALLOC_NORMAL);$a=allocate([109,117,108,0],"i8",ALLOC_NORMAL);Wa=allocate([97,100,
100,0],"i8",ALLOC_NORMAL);Y=allocate([98,105,97,115,0],"i8",ALLOC_NORMAL);kb=allocate([117,108,97,119,50,108,105,110,0],"i8",ALLOC_NORMAL);ra=allocate([108,105,110,50,117,108,97,119,0],"i8",ALLOC_NORMAL);Ta=allocate([97,108,97,119,50,108,105,110,0],"i8",ALLOC_NORMAL);ia=allocate([108,105,110,50,97,108,97,119,0],"i8",ALLOC_NORMAL);ba=allocate([108,105,110,50,108,105,110,0],"i8",ALLOC_NORMAL);Ya=allocate([97,100,112,99,109,50,108,105,110,0],"i8",ALLOC_NORMAL);ta=allocate([108,105,110,50,97,100,112,
99,109,0],"i8",ALLOC_NORMAL);O=allocate([116,111,109,111,110,111,0],"i8",ALLOC_NORMAL);wb=allocate([116,111,115,116,101,114,101,111,0],"i8",ALLOC_NORMAL);bb=allocate([103,101,116,115,97,109,112,108,101,0],"i8",ALLOC_NORMAL);vb=allocate([114,101,118,101,114,115,101,0],"i8",ALLOC_NORMAL);ka=allocate([114,97,116,101,99,118,0],"i8",ALLOC_NORMAL);za=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8",
"i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Aa=allocate([97,117,100,105,111,111,112,0],"i8",ALLOC_NORMAL);La=allocate([97,117,100,105,111,111,112,46,101,114,
114,111,114,0],"i8",ALLOC_NORMAL);ya=allocate([101,114,114,111,114,0],"i8",ALLOC_NORMAL);HEAP[za]=Ga;HEAP[za+4]=g+2;HEAP[za+16]=ha;HEAP[za+20]=g+4;HEAP[za+32]=Na;HEAP[za+36]=g+6;HEAP[za+48]=jb;HEAP[za+52]=g+8;HEAP[za+64]=hb;HEAP[za+68]=g+10;HEAP[za+80]=Qa;HEAP[za+84]=g+12;HEAP[za+96]=Ha;HEAP[za+100]=g+14;HEAP[za+112]=Ra;HEAP[za+116]=g+16;HEAP[za+128]=Ia;HEAP[za+132]=g+18;HEAP[za+144]=Fa;HEAP[za+148]=g+20;HEAP[za+160]=$a;HEAP[za+164]=g+22;HEAP[za+176]=Wa;HEAP[za+180]=g+24;HEAP[za+192]=Y;HEAP[za+196]=
g+26;HEAP[za+208]=kb;HEAP[za+212]=g+28;HEAP[za+224]=ra;HEAP[za+228]=g+30;HEAP[za+240]=Ta;HEAP[za+244]=g+32;HEAP[za+256]=ia;HEAP[za+260]=g+34;HEAP[za+272]=ba;HEAP[za+276]=g+36;HEAP[za+288]=Ya;HEAP[za+292]=g+38;HEAP[za+304]=ta;HEAP[za+308]=g+40;HEAP[za+320]=O;HEAP[za+324]=g+42;HEAP[za+336]=wb;HEAP[za+340]=g+44;HEAP[za+352]=bb;HEAP[za+356]=g+46;HEAP[za+368]=vb;HEAP[za+372]=g+48;HEAP[za+384]=ka;HEAP[za+388]=g+50}var f={arguments:[]};Runtime.QUANTUM_SIZE=4;var h,j,k,l,m,n,o,p,q,r,t,s,u,v,w,x,y,B,A,C,G,
F,E,N,Q,I,J,P,D,T,L,$,R,K,H,S,U,z,aa,ja,la,da,Ka,Ma,wa,ib,cb,db,Da,gb,Xa,Ca,Za,Va,Ga,ha,Na,jb,hb,Qa,Ha,Ra,Ia,Fa,$a,Wa,Y,kb,ra,Ta,ia,ba,Ya,ta,O,wb,bb,vb,ka,za,Aa,La,ya;f._initaudioop=function(){var a;for(a=-1;;)switch(a){case -1:var b,c;b=_Py_InitModule4(Aa,za,0,0,1013);a=b==0?4:1;break;case 1:c=_PyModule_GetDict(b);a=c==0?4:2;break;case 2:a=_PyErr_NewException(La,0,0);HEAP[o]=a;a=HEAP[o]!=0?3:4;break;case 3:_PyDict_SetItemString(c,ya,HEAP[o]);a=4;break;case 4:return;default:assert(0,"bad label: "+
a)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j=d+4,k=d+8,l,m,n;e=c;n=l=0;e=_PyArg_ParseTuple(e,s,allocate([h,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=18;break;case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:g=0;e=18;break;case 4:m=0;e=m<HEAP[j]?5:17;break;case 5:e=HEAP[k]==1?6:7;break;case 6:var o=HEAP[HEAP[h]+m];l=o;f=6;e=12;
break;case 7:e=HEAP[k]==2?8:9;break;case 8:var p=HEAP[HEAP[h]+m];l=p;f=8;e=12;break;case 9:e=HEAP[k]==4?10:11;break;case 10:var q=HEAP[HEAP[h]+m];l=q;f=10;e=12;break;case 11:var r=l,f=11;e=12;break;case 12:e=(f==11?r:f==10?q:f==8?p:o)<0?13:14;break;case 13:l=0-l;e=14;break;case 14:e=l>n?15:16;break;case 15:n=l;e=16;break;case 16:m+=HEAP[k];e=m<HEAP[j]?5:17;break;case 17:g=_PyInt_FromLong(n);e=18;break;case 18:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;
STACKTOP+=12;_memset(d,0,12);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k,l,m,n;e=c;k=0;m=2147483647;n=-2147483647;e=_PyArg_ParseTuple(e,u,allocate([g,0,0,0,h,0,0,0,j,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=17;break;case 2:e=a(HEAP[h],HEAP[j])==0?3:4;break;case 3:f=0;e=17;break;case 4:l=0;e=l<HEAP[h]?5:16;break;case 5:e=HEAP[j]==1?6:7;break;case 6:k=HEAP[HEAP[g]+l];e=11;break;case 7:e=HEAP[j]==2?8:9;break;case 8:k=HEAP[HEAP[g]+l];e=11;
break;case 9:e=HEAP[j]==4?10:11;break;case 10:k=HEAP[HEAP[g]+l];e=11;break;case 11:e=k>n?12:13;break;case 12:n=k;e=13;break;case 13:e=k<m?14:15;break;case 14:m=k;e=15;break;case 15:l+=HEAP[j];e=l<HEAP[h]?5:16;break;case 16:f=_Py_BuildValue(v,allocate([m,0,0,0,n,0,0,0],["i32",0,0,0,"i32",0,0,0],ALLOC_STACK));e=17;break;case 17:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j=d+4,
k=d+8,l,m,n;e=c;n=l=0;e=_PyArg_ParseTuple(e,w,allocate([h,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=16;break;case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:g=0;e=16;break;case 4:m=0;var o=HEAP[j];m<o?(f=4,e=5):(f=4,e=12);break;case 5:e=HEAP[k]==1?6:7;break;case 6:l=HEAP[HEAP[h]+m];e=11;break;case 7:e=HEAP[k]==2?8:9;break;case 8:l=HEAP[HEAP[h]+m];e=11;break;case 9:e=HEAP[k]==4?10:11;break;case 10:l=HEAP[HEAP[h]+m];e=11;break;case 11:n=
l+n;m+=HEAP[k];var p=HEAP[j];m<p?(f=11,e=5):(f=11,e=12);break;case 12:e=(f==11?p:o)==0?13:14;break;case 13:l=0;e=15;break;case 14:l=n/(HEAP[j]/HEAP[k]|0)|0;e=15;break;case 15:g=_PyInt_FromLong(l);e=16;break;case 16:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j=d+4,k=d+8,l,m,n,o,p,q,r,s,t;e=c;q=o=n=m=l=0;e=_PyArg_ParseTuple(e,I,allocate([h,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,
0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=36;break;case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:g=0;e=36;break;case 4:e=HEAP[k]==1?5:6;break;case 5:m=HEAP[HEAP[h]];e=10;break;case 6:e=HEAP[k]==2?7:8;break;case 7:m=HEAP[HEAP[h]];e=10;break;case 8:var u=HEAP[k];u==4?(f=8,e=9):(f=8,e=11);break;case 9:m=HEAP[HEAP[h]];e=10;break;case 10:var v=HEAP[k],f=10;e=11;break;case 11:e=(f==10?v:u)==1?12:13;break;case 12:l=HEAP[HEAP[h]+HEAP[k]];e=17;break;case 13:e=HEAP[k]==2?14:15;
break;case 14:l=HEAP[HEAP[h]+HEAP[k]];e=17;break;case 15:e=HEAP[k]==4?16:17;break;case 16:l=HEAP[HEAP[h]+HEAP[k]];e=17;break;case 17:s=l-m;var w=HEAP[k];p=w;p<HEAP[j]?(f=17,e=19):(f=17,e=35);break;case 18:var x=HEAP[k],f=18;e=19;break;case 19:e=(f==18?x:w)==1?20:21;break;case 20:l=HEAP[HEAP[h]+p];e=25;break;case 21:e=HEAP[k]==2?22:23;break;case 22:l=HEAP[HEAP[h]+p];e=25;break;case 23:e=HEAP[k]==4?24:25;break;case 24:l=HEAP[HEAP[h]+p];e=25;break;case 25:var y=r=l-m;s*y<0?(f=25,e=26):(f=25,e=32);break;
case 26:e=n!=0?27:31;break;case 27:t=m-o;e=t<0?28:29;break;case 28:t=0-t;e=29;break;case 29:e=t>q?30:31;break;case 30:q=t;e=31;break;case 31:n=1;o=m;var z=r,f=31;e=32;break;case 32:e=f==31?z:y;m=l;e=e!=0?33:34;break;case 33:s=r;e=34;break;case 34:p+=HEAP[k];e=p<HEAP[j]?18:35;break;case 35:g=_PyInt_FromLong(q);e=36;break;case 36:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,
j=d+4,k=d+8,l,m,n,o,p,q,r,s,t,u;e=c;u=q=o=n=m=l=0;e=_PyArg_ParseTuple(e,Q,allocate([h,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=38;break;case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:g=0;e=38;break;case 4:e=HEAP[k]==1?5:6;break;case 5:m=HEAP[HEAP[h]];e=10;break;case 6:e=HEAP[k]==2?7:8;break;case 7:m=HEAP[HEAP[h]];e=10;break;case 8:var v=HEAP[k];v==4?(f=8,e=9):(f=8,e=11);break;case 9:m=HEAP[HEAP[h]];e=10;break;case 10:var w=HEAP[k],f=
10;e=11;break;case 11:e=(f==10?w:v)==1?12:13;break;case 12:l=HEAP[HEAP[h]+HEAP[k]];e=17;break;case 13:e=HEAP[k]==2?14:15;break;case 14:l=HEAP[HEAP[h]+HEAP[k]];e=17;break;case 15:e=HEAP[k]==4?16:17;break;case 16:l=HEAP[HEAP[h]+HEAP[k]];e=17;break;case 17:s=l-m;var x=HEAP[k];p=x;p<HEAP[j]?(f=17,e=19):(f=17,e=34);break;case 18:var y=HEAP[k],f=18;e=19;break;case 19:e=(f==18?y:x)==1?20:21;break;case 20:l=HEAP[HEAP[h]+p];e=25;break;case 21:e=HEAP[k]==2?22:23;break;case 22:l=HEAP[HEAP[h]+p];e=25;break;case 23:e=
HEAP[k]==4?24:25;break;case 24:l=HEAP[HEAP[h]+p];e=25;break;case 25:var z=r=l-m;s*z<0?(f=25,e=26):(f=25,e=31);break;case 26:e=n!=0?27:30;break;case 27:t=m-o;e=t<0?28:29;break;case 28:t=0-t;e=29;break;case 29:q=t+q;u+=1;e=30;break;case 30:n=1;o=m;var A=r,f=30;e=31;break;case 31:e=f==30?A:z;m=l;e=e!=0?32:33;break;case 32:s=r;e=33;break;case 33:p+=HEAP[k];e=p<HEAP[j]?18:34;break;case 34:e=u==0?35:36;break;case 35:l=0;e=37;break;case 36:l=q/u|0;e=37;break;case 37:g=_PyInt_FromLong(l);e=38;break;case 38:return f=
g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j=d+4,k=d+8,l,m,n;e=c;n=l=0;e=_PyArg_ParseTuple(e,x,allocate([h,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=16;break;case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:g=0;e=16;break;case 4:m=0;var o=HEAP[j];m<o?(f=4,e=5):(f=4,e=12);break;case 5:e=HEAP[k]==1?6:7;break;case 6:l=HEAP[HEAP[h]+
m];e=11;break;case 7:e=HEAP[k]==2?8:9;break;case 8:l=HEAP[HEAP[h]+m];e=11;break;case 9:e=HEAP[k]==4?10:11;break;case 10:l=HEAP[HEAP[h]+m];e=11;break;case 11:n=l*l+n;m+=HEAP[k];var p=HEAP[j];m<p?(f=11,e=5):(f=11,e=12);break;case 12:e=(f==11?p:o)==0?13:14;break;case 13:l=0;e=15;break;case 14:l=_sqrt(n/(HEAP[j]/HEAP[k]|0))|0;e=15;break;case 15:g=_PyInt_FromLong(l);e=16;break;case 16:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(a,b){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);
var e;for(e=-1;;)switch(e){case -1:var f,g;f=d;var h=d+4,j=d+8,k=d+12,l,m,n,p,q,r;e=_PyArg_ParseTuple(b,y,allocate([f,0,0,0,j,0,0,0,h,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i8**",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=12;break;case 2:e=(HEAP[j]&1)!=0?4:3;break;case 3:e=(HEAP[k]&1)!=0?4:5;break;case 4:_PyErr_SetString(HEAP[o],B);g=0;e=12;break;case 5:HEAP[j]>>=1;HEAP[k]>>=1;e=HEAP[j]<HEAP[k]?6:7;break;case 6:_PyErr_SetString(HEAP[o],A);g=0;e=12;break;case 7:p=c(HEAP[h],HEAP[h],
HEAP[k]);q=c(HEAP[f],HEAP[f],HEAP[k]);n=c(HEAP[f],HEAP[h],HEAP[k]);r=n=(p*q-n*n)/q;m=0;l=1;e=HEAP[j]-HEAP[k]>=l?8:11;break;case 8:n=HEAP[HEAP[f]+2*(l-1)];e=HEAP[HEAP[f]+2*(HEAP[k]+-1+l)];q=e*e+q-n*n;n=c(HEAP[f]+2*l,HEAP[h],HEAP[k]);n=(p*q-n*n)/q;e=n<r?9:10;break;case 9:r=n;m=l;e=10;break;case 10:l+=1;e=HEAP[j]-HEAP[k]>=l?8:11;break;case 11:g=c(HEAP[f]+2*m,HEAP[h],HEAP[k])/p;g=_Py_BuildValue(C,allocate([m,0,0,0,g,0,0,0,0,0,0,0],["i32",0,0,0,"double",0,0,0,0,0,0,0],ALLOC_STACK));e=12;break;case 12:return f=
g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(a,b){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k,l,m,n,p;e=_PyArg_ParseTuple(b,E,allocate([g,0,0,0,h,0,0,0,j,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=12;break;case 2:e=(HEAP[h]&1)!=0?3:4;break;case 3:_PyErr_SetString(HEAP[o],B);f=0;e=12;break;case 4:HEAP[h]>>=1;e=HEAP[j]<0?6:5;break;case 5:e=HEAP[h]<HEAP[j]?6:7;break;case 6:_PyErr_SetString(HEAP[o],
N);f=0;e=12;break;case 7:p=n=c(HEAP[g],HEAP[g],HEAP[j]);l=0;k=1;e=HEAP[h]-HEAP[j]>=k?8:11;break;case 8:e=HEAP[HEAP[g]+2*(k-1)];m=HEAP[HEAP[g]+2*(HEAP[j]+-1+k)];n=m*m+n-e*e;e=n>p?9:10;break;case 9:p=n;l=k;e=10;break;case 10:k+=1;e=HEAP[h]-HEAP[j]>=k?8:11;break;case 11:f=_PyInt_FromLong(l);e=12;break;case 12:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(a,b){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e;for(e=-1;;)switch(e){case -1:var f,g;f=d;var h=d+4,j=d+8,k=d+12;e=_PyArg_ParseTuple(b,
G,allocate([f,0,0,0,j,0,0,0,h,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i8**",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=8;break;case 2:e=(HEAP[j]&1)!=0?4:3;break;case 3:e=(HEAP[k]&1)!=0?4:5;break;case 4:_PyErr_SetString(HEAP[o],B);g=0;e=8;break;case 5:e=HEAP[j]!=HEAP[k]?6:7;break;case 6:_PyErr_SetString(HEAP[o],F);g=0;e=8;break;case 7:HEAP[k]>>=1;e=c(HEAP[h],HEAP[h],HEAP[k]);g=c(HEAP[f],HEAP[h],HEAP[k]);e=g/e;g=_PyFloat_FromDouble(e);e=8;break;case 8:return f=g,STACKTOP=d,f;default:assert(0,
"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k,l,m,n;e=c;k=0;e=_PyArg_ParseTuple(e,J,allocate([g,0,0,0,h,0,0,0,j,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=15;break;case 2:e=a(HEAP[h],HEAP[j])==0?3:4;break;case 3:f=0;e=15;break;case 4:n=-1;m=17;l=0;e=l<HEAP[h]?5:14;break;case 5:e=HEAP[j]==1?6:7;break;case 6:k=HEAP[HEAP[g]+l]>>7;e=11;break;case 7:e=HEAP[j]==2?8:9;
break;case 8:k=HEAP[HEAP[g]+l]>>15;e=11;break;case 9:e=HEAP[j]==4?10:11;break;case 10:k=HEAP[HEAP[g]+l]>>31;e=11;break;case 11:k&=1;e=k!=m?12:13;break;case 12:n+=1;e=13;break;case 13:m=k;l+=HEAP[j];e=l<HEAP[h]?5:14;break;case 14:f=_PyInt_FromLong(n);e=15;break;case 15:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=20;_memset(d,0,20);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h,j=d+4,k=d+8,l,m=d+12,n,q,r,s;e=c;l=0;e=_PyArg_ParseTuple(e,P,allocate([g,
0,0,0,j,0,0,0,k,0,0,0,m,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"double*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=32;break;case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:f=0;e=32;break;case 4:e=HEAP[k]==1?5:6;break;case 5:q=127;e=11;break;case 6:e=HEAP[k]==2?7:8;break;case 7:q=32767;e=11;break;case 8:e=HEAP[k]==4?9:10;break;case 9:q=2147483647;e=11;break;case 10:_PyErr_SetString(HEAP[o],p);f=0;e=32;break;case 11:r=e=_PyString_FromStringAndSize(0,HEAP[j]);e=e==0?12:13;break;case 12:f=
0;e=32;break;case 13:h=_PyString_AsString(r);s=0;e=s<HEAP[j]?14:31;break;case 14:e=HEAP[k]==1?15:16;break;case 15:l=HEAP[HEAP[g]+s];e=20;break;case 16:e=HEAP[k]==2?17:18;break;case 17:l=HEAP[HEAP[g]+s];e=20;break;case 18:e=HEAP[k]==4?19:20;break;case 19:l=HEAP[HEAP[g]+s];e=20;break;case 20:n=l*HEAP[m];var t=q;e=n>q?21:22;break;case 21:n=t;e=24;break;case 22:e=0-t>n?23:24;break;case 23:n=0-q;e=24;break;case 24:l=n|0;e=HEAP[k]==1?25:26;break;case 25:HEAP[h+s]=l&255;e=30;break;case 26:e=HEAP[k]==2?27:
28;break;case 27:HEAP[h+s]=l&65535;e=30;break;case 28:e=HEAP[k]==4?29:30;break;case 29:HEAP[h+s]=l;e=30;break;case 30:s+=HEAP[k];e=s<HEAP[j]?14:31;break;case 31:f=r;e=32;break;case 32:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=20;_memset(d,0,20);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j=d,k=d+4,l,m=d+8,n=d+12,q=d+16,r,s,t,u,v,w;e=c;s=r=0;e=_PyArg_ParseTuple(e,$,allocate([j,0,0,0,m,0,0,0,k,0,0,0,n,0,0,0,q,0,0,0],["i8**",0,0,0,"i32*",0,
0,0,"i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;e=49;break;case 2:e=a(HEAP[m],HEAP[q])==0?3:4;break;case 3:h=0;e=49;break;case 4:e=HEAP[m]!=HEAP[n]?5:6;break;case 5:_PyErr_SetString(HEAP[o],R);h=0;e=49;break;case 6:e=HEAP[q]==1?7:8;break;case 7:t=127;e=13;break;case 8:e=HEAP[q]==2?9:10;break;case 9:t=32767;e=13;break;case 10:e=HEAP[q]==4?11:12;break;case 11:t=2147483647;e=13;break;case 12:_PyErr_SetString(HEAP[o],p);h=0;e=49;break;case 13:v=e=_PyString_FromStringAndSize(0,
HEAP[m]);e=e==0?14:15;break;case 14:h=0;e=49;break;case 15:l=_PyString_AsString(v);w=0;e=w<HEAP[m]?16:48;break;case 16:e=HEAP[q]==1?17:18;break;case 17:r=HEAP[HEAP[j]+w];e=22;break;case 18:e=HEAP[q]==2?19:20;break;case 19:r=HEAP[HEAP[j]+w];e=22;break;case 20:var x=HEAP[q];x==4?(f=20,e=21):(f=20,e=23);break;case 21:r=HEAP[HEAP[j]+w];e=22;break;case 22:var y=HEAP[q],f=22;e=23;break;case 23:e=(f==22?y:x)==1?24:25;break;case 24:s=HEAP[HEAP[k]+w];e=29;break;case 25:e=HEAP[q]==2?26:27;break;case 26:s=HEAP[HEAP[k]+
w];e=29;break;case 27:e=HEAP[q]==4?28:29;break;case 28:s=HEAP[HEAP[k]+w];e=29;break;case 29:u=s+r;var z=t;e=u>t?30:31;break;case 30:u=z;e=40;break;case 31:e=0-z>u?32:33;break;case 32:u=0-t;e=40;break;case 33:var A=HEAP[q];A==4?(f=33,e=34):(f=33,e=41);break;case 34:e=(r^u)<0?35:40;break;case 35:e=(s^u)<0?36:40;break;case 36:var B=t;e=r<=0?37:38;break;case 37:g=0-B;e=39;break;case 38:g=B;e=39;break;case 39:u=g;e=40;break;case 40:var H=HEAP[q],f=40;e=41;break;case 41:e=(f==40?H:A)==1?42:43;break;case 42:HEAP[l+
w]=u&255;e=47;break;case 43:e=HEAP[q]==2?44:45;break;case 44:HEAP[l+w]=u&65535;e=47;break;case 45:e=HEAP[q]==4?46:47;break;case 46:HEAP[l+w]=u;e=47;break;case 47:w+=HEAP[q];e=w<HEAP[m]?16:48;break;case 48:h=v;e=49;break;case 49:return f=h,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j,k=d+4,l=d+8,m,n,o,p=d+12;e=c;m=0;e=_PyArg_ParseTuple(e,K,allocate([h,0,0,0,k,0,0,0,l,0,0,0,p,0,0,0],
["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=22;break;case 2:e=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;e=22;break;case 4:n=_PyString_FromStringAndSize(0,HEAP[k]);e=n==0?5:6;break;case 5:g=0;e=22;break;case 6:j=_PyString_AsString(n);o=0;e=o<HEAP[k]?7:21;break;case 7:e=HEAP[l]==1?8:9;break;case 8:m=HEAP[HEAP[h]+o];e=13;break;case 9:e=HEAP[l]==2?10:11;break;case 10:m=HEAP[HEAP[h]+o];e=13;break;case 11:var q=HEAP[l];q==4?(f=11,e=12):(f=11,e=14);break;
case 12:m=HEAP[HEAP[h]+o];e=13;break;case 13:var r=HEAP[l],f=13;e=14;break;case 14:e=(f==13?r:q)==1?15:16;break;case 15:HEAP[j+o]=(HEAP[p]&255)+(m&255);e=20;break;case 16:e=HEAP[l]==2?17:18;break;case 17:HEAP[j+o]=(HEAP[p]&65535)+(m&65535);e=20;break;case 18:e=HEAP[l]==4?19:20;break;case 19:HEAP[j+o]=m+HEAP[p];e=20;break;case 20:o+=HEAP[l];e=o<HEAP[k]?7:21;break;case 21:g=n;e=22;break;case 22:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,
0,12);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h,j=d+4,l=d+8,m,n,o;e=_PyArg_ParseTuple(c,db,allocate([g,0,0,0,j,0,0,0,l,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=17;break;case 2:e=a(HEAP[j],HEAP[l])==0?3:4;break;case 3:f=0;e=17;break;case 4:e=(2147483647/HEAP[l]|0)<HEAP[j]?5:6;break;case 5:_PyErr_SetString(HEAP[_PyExc_MemoryError],L);f=0;e=17;break;case 6:n=_PyString_FromStringAndSize(0,HEAP[l]*HEAP[j]);e=n==0?7:8;break;case 7:f=0;e=17;break;case 8:h=
_PyString_AsString(n);o=0;e=HEAP[l]*HEAP[j]>o?9:16;break;case 9:m=HEAP[g];e=HEAP[m];HEAP[g]=m+1;m=HEAP[k+e*2];e=HEAP[l]==1?10:11;break;case 10:HEAP[h+o]=m>>8&255;e=15;break;case 11:e=HEAP[l]==2?12:13;break;case 12:HEAP[h+o]=m&65535;e=15;break;case 13:e=HEAP[l]==4?14:15;break;case 14:HEAP[h+o]=m<<16;e=15;break;case 15:o+=HEAP[l];e=HEAP[l]*HEAP[j]>o?9:16;break;case 16:f=n;e=17;break;case 17:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,
0,12);var f;for(f=-1;;)switch(f){case -1:var g,h=d,k,l=d+4,m=d+8,n,o,p;f=c;n=0;f=_PyArg_ParseTuple(f,cb,allocate([h,0,0,0,l,0,0,0,m,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;f=15;break;case 2:f=a(HEAP[l],HEAP[m])==0?3:4;break;case 3:g=0;f=15;break;case 4:o=_PyString_FromStringAndSize(0,HEAP[l]/HEAP[m]|0);f=o==0?5:6;break;case 5:g=0;f=15;break;case 6:k=_PyString_AsString(o);p=0;f=p<HEAP[l]?7:14;break;case 7:f=HEAP[m]==1?8:9;break;case 8:n=HEAP[HEAP[h]+p]<<
8;f=13;break;case 9:f=HEAP[m]==2?10:11;break;case 10:n=HEAP[HEAP[h]+p];f=13;break;case 11:f=HEAP[m]==4?12:13;break;case 12:n=HEAP[HEAP[h]+p]>>16;f=13;break;case 13:a:{f=n&65535;for(var q=void 0,r=null,q=-1;;)switch(q){case -1:var s,t,u,v;s=f;s>>=2;q=s<0?1:2;break;case 1:var w=0-s;s=w;u=127;r=1;q=3;break;case 2:u=255;var x=s,r=2,q=3;break;case 3:q=(r==2?x:w)>32635?4:5;break;case 4:s=32635;q=5;break;case 5:s+=33;v=q=e(s&65535,j);q=q>7?6:7;break;case 6:t=u&255^127;q=8;break;case 7:t=s>>v+1&15|(v&255)<<
4;t^=u&255;q=8;break;case 8:f=t;f&=255;break a;default:assert(0,"bad label: "+q)}f=void 0}HEAP[k]=f;k+=1;p+=HEAP[m];f=p<HEAP[l]?7:14;break;case 14:g=o;f=15;break;case 15:return STACKTOP=d,g;default:assert(0,"bad label: "+f)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h,j=d+4,k=d+8,m,n,o;e=_PyArg_ParseTuple(c,gb,allocate([g,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=17;break;
case 2:e=a(HEAP[j],HEAP[k])==0?3:4;break;case 3:f=0;e=17;break;case 4:e=(2147483647/HEAP[k]|0)<HEAP[j]?5:6;break;case 5:_PyErr_SetString(HEAP[_PyExc_MemoryError],L);f=0;e=17;break;case 6:n=_PyString_FromStringAndSize(0,HEAP[k]*HEAP[j]);e=n==0?7:8;break;case 7:f=0;e=17;break;case 8:h=_PyString_AsString(n);o=0;e=HEAP[k]*HEAP[j]>o?9:16;break;case 9:m=HEAP[g];e=HEAP[m];HEAP[g]=m+1;m=HEAP[l+e*2];e=HEAP[k]==1?10:11;break;case 10:HEAP[h+o]=m>>8&255;e=15;break;case 11:e=HEAP[k]==2?12:13;break;case 12:HEAP[h+
o]=m&65535;e=15;break;case 13:e=HEAP[k]==4?14:15;break;case 14:HEAP[h+o]=m<<16;e=15;break;case 15:o+=HEAP[k];e=HEAP[k]*HEAP[j]>o?9:16;break;case 16:f=n;e=17;break;case 17:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var f;for(f=-1;;)switch(f){case -1:var g,j=d,k,l=d+4,m=d+8,n,o,p;f=c;n=0;f=_PyArg_ParseTuple(f,Da,allocate([j,0,0,0,l,0,0,0,m,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;f=
15;break;case 2:f=a(HEAP[l],HEAP[m])==0?3:4;break;case 3:g=0;f=15;break;case 4:o=_PyString_FromStringAndSize(0,HEAP[l]/HEAP[m]|0);f=o==0?5:6;break;case 5:g=0;f=15;break;case 6:k=_PyString_AsString(o);p=0;f=p<HEAP[l]?7:14;break;case 7:f=HEAP[m]==1?8:9;break;case 8:n=HEAP[HEAP[j]+p]<<8;f=13;break;case 9:f=HEAP[m]==2?10:11;break;case 10:n=HEAP[HEAP[j]+p];f=13;break;case 11:f=HEAP[m]==4?12:13;break;case 12:n=HEAP[HEAP[j]+p]>>16;f=13;break;case 13:a:{f=n&65535;for(var q=void 0,q=-1;;)switch(q){case -1:var r,
s,t,u,v;r=f;r>>=3;q=r>=0?1:2;break;case 1:t=213;q=3;break;case 2:t=85;r^=-1;q=3;break;case 3:u=q=e(r&65535,h);q=q>7?4:5;break;case 4:s=t&255^127;q=9;break;case 5:v=(u&255)<<4;var w=r,q=u<=1?6:7;break;case 6:v|=w>>1&15;q=8;break;case 7:v|=w>>u&15;q=8;break;case 8:s=t&255^v;q=9;break;case 9:f=s;f&=255;break a;default:assert(0,"bad label: "+q)}f=void 0}HEAP[k]=f;k+=1;p+=HEAP[m];f=p<HEAP[l]?7:14;break;case 14:g=o;f=15;break;case 15:return STACKTOP=d,g;default:assert(0,"bad label: "+f)}},0,function(c,
d){var e=STACKTOP;STACKTOP+=16;_memset(e,0,16);var f;for(f=-1;;)switch(f){case -1:var g,h=e,j,k=e+4,l=e+8,m=e+12,n,o,p,q;f=d;n=0;f=_PyArg_ParseTuple(f,S,allocate([h,0,0,0,k,0,0,0,l,0,0,0,m,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;f=25;break;case 2:f=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;f=25;break;case 4:f=b(HEAP[m])==0?5:6;break;case 5:g=0;f=25;break;case 6:f=(HEAP[k]/HEAP[l]|0)>(2147483647/HEAP[m]|0)?7:8;break;case 7:_PyErr_SetString(HEAP[_PyExc_MemoryError],
L);g=0;f=25;break;case 8:o=_PyString_FromStringAndSize(0,HEAP[m]*(HEAP[k]/HEAP[l]|0));f=o==0?9:10;break;case 9:g=0;f=25;break;case 10:j=_PyString_AsString(o);q=p=0;f=p<HEAP[k]?11:24;break;case 11:f=HEAP[l]==1?12:13;break;case 12:n=HEAP[HEAP[h]+p]<<8;f=17;break;case 13:f=HEAP[l]==2?14:15;break;case 14:n=HEAP[HEAP[h]+p];f=17;break;case 15:f=HEAP[l]==4?16:17;break;case 16:n=HEAP[HEAP[h]+p]>>16;f=17;break;case 17:f=HEAP[m]==1?18:19;break;case 18:HEAP[j+q]=n>>8&255;f=23;break;case 19:f=HEAP[m]==2?20:21;
break;case 20:HEAP[j+q]=n&65535;f=23;break;case 21:f=HEAP[m]==4?22:23;break;case 22:HEAP[j+q]=n<<16;f=23;break;case 23:p+=HEAP[l];q+=HEAP[m];f=p<HEAP[k]?11:24;break;case 24:g=o;f=25;break;case 25:return STACKTOP=e,g;default:assert(0,"bad label: "+f)}},0,function(b,c){var d=STACKTOP;STACKTOP+=24;_memset(d,0,24);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j,k=d+4,l=d+8,o=d+12,p,q,r=d+16,s,t,u,v,w=d+20,x,y,z;e=c;y=0;e=_PyArg_ParseTuple(e,Va,allocate([h,0,0,0,k,0,0,0,l,0,0,0,w,0,0,0],["i8**",
0,0,0,"i32*",0,0,0,"i32*",0,0,0,"%struct.PyObject**",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=43;break;case 2:e=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;e=43;break;case 4:e=HEAP[w]==__Py_NoneStruct?5:6;break;case 5:HEAP[o]=0;HEAP[r]=0;e=8;break;case 6:e=_PyArg_ParseTuple(HEAP[w],Ca,allocate([o,0,0,0,r,0,0,0],["i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?7:8;break;case 7:g=0;e=43;break;case 8:e=(1073741823/HEAP[l]|0)<HEAP[k]?9:10;break;case 9:_PyErr_SetString(HEAP[_PyExc_MemoryError],L);g=0;
e=43;break;case 10:v=_PyString_FromStringAndSize(0,HEAP[k]*2*HEAP[l]);e=v==0?11:12;break;case 11:g=0;e=43;break;case 12:j=_PyString_AsString(v);p=HEAP[n+HEAP[r]*4];x=z=0;e=HEAP[k]*2*HEAP[l]>x?13:40;break;case 13:e=z!=0?14:15;break;case 14:q=y&15;e=16;break;case 15:q=HEAP[h];y=HEAP[q];HEAP[h]=q+1;q=y>>4&15;e=16;break;case 16:z=z==0;var A=HEAP[r]+HEAP[m+q*4];HEAP[r]=A;e=A<0?17:18;break;case 17:HEAP[r]=0;e=20;break;case 18:e=A>88?19:20;break;case 19:HEAP[r]=88;e=20;break;case 20:s=q&8;q&=7;t=p>>3;e=
(q&4)!=0?21:22;break;case 21:t=p+t;e=22;break;case 22:e=(q&2)!=0?23:24;break;case 23:t=(p>>1)+t;e=24;break;case 24:e=(q&1)!=0?25:26;break;case 25:t=(p>>2)+t;e=26;break;case 26:var B=HEAP[o],H=t;e=s!=0?27:28;break;case 27:var C=B-H;HEAP[o]=C;f=27;e=29;break;case 28:var D=H+B;HEAP[o]=D;f=28;e=29;break;case 29:e=(f==28?D:C)>32767?30:31;break;case 30:HEAP[o]=32767;e=33;break;case 31:e=HEAP[o]<-32768?32:33;break;case 32:HEAP[o]=-32768;e=33;break;case 33:p=HEAP[n+HEAP[r]*4];e=HEAP[l]==1?34:35;break;case 34:HEAP[j+
x]=HEAP[o]>>8&255;e=39;break;case 35:e=HEAP[l]==2?36:37;break;case 36:HEAP[j+x]=HEAP[o]&65535;e=39;break;case 37:e=HEAP[l]==4?38:39;break;case 38:HEAP[j+x]=HEAP[o]<<16;e=39;break;case 39:x+=HEAP[l];e=HEAP[k]*2*HEAP[l]>x?13:40;break;case 40:u=_Py_BuildValue(Za,allocate([v,0,0,0,HEAP[o],0,0,0,HEAP[r],0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_STACK));HEAP[v]-=1;e=HEAP[v]==0?41:42;break;case 41:FUNCTION_TABLE[HEAP[HEAP[v+4]+24]](v);e=42;break;case 42:g=u;e=43;break;case 43:return f=
g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=24;_memset(d,0,24);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j,k=d+4,l=d+8,o,p,q=d+12,r,s=d+16,t,u,v,w,x=d+20,y,z,A,B;e=c;A=o=0;e=_PyArg_ParseTuple(e,Xa,allocate([h,0,0,0,k,0,0,0,l,0,0,0,x,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"%struct.PyObject**",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=44;break;case 2:e=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;e=44;break;case 4:y=_PyString_FromStringAndSize(0,
HEAP[k]/(HEAP[l]*2)|0);e=y==0?5:6;break;case 5:g=0;e=44;break;case 6:j=_PyString_AsString(y);e=HEAP[x]==__Py_NoneStruct?7:8;break;case 7:HEAP[q]=0;HEAP[s]=0;e=10;break;case 8:e=_PyArg_ParseTuple(HEAP[x],Ca,allocate([q,0,0,0,s,0,0,0],["i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?9:10;break;case 9:g=0;e=44;break;case 10:p=HEAP[n+HEAP[s]*4];B=1;z=0;e=z<HEAP[k]?11:41;break;case 11:e=HEAP[l]==1?12:13;break;case 12:o=HEAP[HEAP[h]+z]<<8;e=17;break;case 13:e=HEAP[l]==2?14:15;break;case 14:o=HEAP[HEAP[h]+z];
e=17;break;case 15:e=HEAP[l]==4?16:17;break;case 16:o=HEAP[HEAP[h]+z]>>16;e=17;break;case 17:v=o-HEAP[q];e=o-HEAP[q]<0?19:18;break;case 18:t=0;e=20;break;case 19:t=8;v=0-v;e=20;break;case 20:r=0;u=p>>3;e=v>=p?21:22;break;case 21:r=4;v-=p;u=p+u;e=22;break;case 22:p>>=1;e=v>=p?23:24;break;case 23:r|=2;v-=p;u=p+u;e=24;break;case 24:p>>=1;e=v>=p?25:26;break;case 25:r|=1;u=p+u;e=26;break;case 26:var H=HEAP[q],C=u;e=t!=0?27:28;break;case 27:var D=H-C;HEAP[q]=D;f=27;e=29;break;case 28:var E=C+H;HEAP[q]=
E;f=28;e=29;break;case 29:e=(f==28?E:D)>32767?30:31;break;case 30:HEAP[q]=32767;e=33;break;case 31:e=HEAP[q]<-32768?32:33;break;case 32:HEAP[q]=-32768;e=33;break;case 33:r|=t;var F=HEAP[s]+HEAP[m+r*4];HEAP[s]=F;e=F<0?34:35;break;case 34:HEAP[s]=0;e=37;break;case 35:e=F>88?36:37;break;case 36:HEAP[s]=88;e=37;break;case 37:p=HEAP[n+HEAP[s]*4];var G=r;e=B!=0?38:39;break;case 38:A=G<<4&240;e=40;break;case 39:HEAP[j]=A&255|G&15;j+=1;e=40;break;case 40:B=B==0;z+=HEAP[l];e=z<HEAP[k]?11:41;break;case 41:w=
_Py_BuildValue(Za,allocate([y,0,0,0,HEAP[q],0,0,0,HEAP[s],0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_STACK));HEAP[y]-=1;e=HEAP[y]==0?42:43;break;case 42:FUNCTION_TABLE[HEAP[HEAP[y+4]+24]](y);e=43;break;case 43:g=w;e=44;break;case 44:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=28;_memset(d,0,28);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j,k=d+4,l=d+8,m,n,r=d+12,s=d+20,t,u,v,w;e=c;n=m=0;e=_PyArg_ParseTuple(e,D,
allocate([h,0,0,0,k,0,0,0,l,0,0,0,r,0,0,0,s,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"double*",0,0,0,"double*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=41;break;case 2:e=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;e=41;break;case 4:e=((HEAP[k]/HEAP[l]|0)&1)!=0?5:6;break;case 5:_PyErr_SetString(HEAP[o],q);g=0;e=41;break;case 6:e=HEAP[l]==1?7:8;break;case 7:u=127;e=13;break;case 8:e=HEAP[l]==2?9:10;break;case 9:u=32767;e=13;break;case 10:e=HEAP[l]==4?11:12;break;case 11:u=2147483647;e=13;
break;case 12:_PyErr_SetString(HEAP[o],p);g=0;e=41;break;case 13:v=e=_PyString_FromStringAndSize(0,HEAP[k]/2|0);e=e==0?14:15;break;case 14:g=0;e=41;break;case 15:j=_PyString_AsString(v);w=0;e=w<HEAP[k]?16:40;break;case 16:e=HEAP[l]==1?17:18;break;case 17:m=HEAP[HEAP[h]+w];e=22;break;case 18:e=HEAP[l]==2?19:20;break;case 19:m=HEAP[HEAP[h]+w];e=22;break;case 20:var x=HEAP[l];x==4?(f=20,e=21):(f=20,e=23);break;case 21:m=HEAP[HEAP[h]+w];e=22;break;case 22:var y=HEAP[l],f=22;e=23;break;case 23:e=(f==22?
y:x)==1?24:25;break;case 24:n=HEAP[HEAP[h]+w+1];e=29;break;case 25:e=HEAP[l]==2?26:27;break;case 26:n=HEAP[HEAP[h]+w+2];e=29;break;case 27:e=HEAP[l]==4?28:29;break;case 28:n=HEAP[HEAP[h]+w+4];e=29;break;case 29:t=m*HEAP[r]+n*HEAP[s];var z=u;e=t>u?30:31;break;case 30:t=z;e=33;break;case 31:e=0-z>t?32:33;break;case 32:t=0-u;e=33;break;case 33:m=t|0;e=HEAP[l]==1?34:35;break;case 34:HEAP[j+(w/2|0)]=m&255;e=39;break;case 35:e=HEAP[l]==2?36:37;break;case 36:HEAP[j+(w/2|0)]=m&65535;e=39;break;case 37:e=
HEAP[l]==4?38:39;break;case 38:HEAP[j+(w/2|0)]=m;e=39;break;case 39:w=HEAP[l]*2+w;e=w<HEAP[k]?16:40;break;case 40:g=v;e=41;break;case 41:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=28;_memset(d,0,28);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j,k=d+4,l=d+8,m,n,q,r=d+12,s=d+20,t,u,v,w;e=c;q=0;e=_PyArg_ParseTuple(e,T,allocate([h,0,0,0,k,0,0,0,l,0,0,0,r,0,0,0,s,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"double*",0,0,0,"double*",0,
0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=45;break;case 2:e=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;e=45;break;case 4:e=HEAP[l]==1?5:6;break;case 5:u=127;e=11;break;case 6:e=HEAP[l]==2?7:8;break;case 7:u=32767;e=11;break;case 8:e=HEAP[l]==4?9:10;break;case 9:u=2147483647;e=11;break;case 10:_PyErr_SetString(HEAP[o],p);g=0;e=45;break;case 11:e=HEAP[k]>1073741823?12:13;break;case 12:_PyErr_SetString(HEAP[_PyExc_MemoryError],L);g=0;e=45;break;case 13:v=_PyString_FromStringAndSize(0,HEAP[k]*2);e=
v==0?14:15;break;case 14:g=0;e=45;break;case 15:j=_PyString_AsString(v);w=0;e=w<HEAP[k]?16:44;break;case 16:e=HEAP[l]==1?17:18;break;case 17:q=HEAP[HEAP[h]+w];e=22;break;case 18:e=HEAP[l]==2?19:20;break;case 19:q=HEAP[HEAP[h]+w];e=22;break;case 20:e=HEAP[l]==4?21:22;break;case 21:q=HEAP[HEAP[h]+w];e=22;break;case 22:t=q*HEAP[r];var x=u;e=t>u?23:24;break;case 23:t=x;e=26;break;case 24:e=0-x>t?25:26;break;case 25:t=0-u;e=26;break;case 26:m=t|0;t=q*HEAP[s];var y=u;e=t>u?27:28;break;case 27:t=y;e=30;
break;case 28:e=0-y>t?29:30;break;case 29:t=0-u;e=30;break;case 30:n=t|0;e=HEAP[l]==1?31:32;break;case 31:HEAP[j+w*2]=m&255;e=36;break;case 32:e=HEAP[l]==2?33:34;break;case 33:HEAP[j+w*2]=m&65535;e=36;break;case 34:var z=HEAP[l];z==4?(f=34,e=35):(f=34,e=37);break;case 35:HEAP[j+w*2]=m;e=36;break;case 36:var A=HEAP[l],f=36;e=37;break;case 37:e=(f==36?A:z)==1?38:39;break;case 38:HEAP[j+w*2+1]=n&255;e=43;break;case 39:e=HEAP[l]==2?40:41;break;case 40:HEAP[j+w*2+2]=n&65535;e=43;break;case 41:e=HEAP[l]==
4?42:43;break;case 42:HEAP[j+w*2+4]=n;e=43;break;case 43:w+=HEAP[l];e=w<HEAP[k]?16:44;break;case 44:g=v;e=45;break;case 45:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k,l=d+12;e=c;k=0;e=_PyArg_ParseTuple(e,r,allocate([g,0,0,0,h,0,0,0,j,0,0,0,l,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=14;break;case 2:e=a(HEAP[h],
HEAP[j])==0?3:4;break;case 3:f=0;e=14;break;case 4:e=HEAP[l]<0?6:5;break;case 5:e=(HEAP[h]/HEAP[j]|0)<=HEAP[l]?6:7;break;case 6:_PyErr_SetString(HEAP[o],t);f=0;e=14;break;case 7:e=HEAP[j]==1?8:9;break;case 8:k=HEAP[HEAP[g]+HEAP[l]];e=13;break;case 9:e=HEAP[j]==2?10:11;break;case 10:k=HEAP[HEAP[g]+HEAP[l]*2];e=13;break;case 11:e=HEAP[j]==4?12:13;break;case 12:k=HEAP[HEAP[g]+HEAP[l]*4];e=13;break;case 13:f=_PyInt_FromLong(k);e=14;break;case 14:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},
0,function(b,c){var d=STACKTOP;STACKTOP+=12;_memset(d,0,12);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,j,k=d+4,l=d+8,m,n,o,p;e=c;m=0;e=_PyArg_ParseTuple(e,H,allocate([h,0,0,0,k,0,0,0,l,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=22;break;case 2:e=a(HEAP[k],HEAP[l])==0?3:4;break;case 3:g=0;e=22;break;case 4:n=_PyString_FromStringAndSize(0,HEAP[k]);e=n==0?5:6;break;case 5:g=0;e=22;break;case 6:j=_PyString_AsString(n);o=0;e=o<HEAP[k]?7:21;break;case 7:e=
HEAP[l]==1?8:9;break;case 8:m=HEAP[HEAP[h]+o]<<8;e=13;break;case 9:e=HEAP[l]==2?10:11;break;case 10:m=HEAP[HEAP[h]+o];e=13;break;case 11:var q=HEAP[l];q==4?(f=11,e=12):(f=11,e=14);break;case 12:m=HEAP[HEAP[h]+o]>>16;e=13;break;case 13:var r=HEAP[l],f=13;e=14;break;case 14:e=f==13?r:q;p=HEAP[k]+(0-e)+(0-o);e=e==1?15:16;break;case 15:HEAP[j+p]=m>>8&255;e=20;break;case 16:e=HEAP[l]==2?17:18;break;case 17:HEAP[j+p]=m&65535;e=20;break;case 18:e=HEAP[l]==4?19:20;break;case 19:HEAP[j+p]=m<<16;e=20;break;
case 20:o+=HEAP[l];e=o<HEAP[k]?7:21;break;case 21:g=n;e=22;break;case 22:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(a,c){var d=STACKTOP;STACKTOP+=48;_memset(d,0,48);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,j=d,k,l=d+4,m=d+8,n=d+12,p=d+16,r=d+20,s=d+24,t=d+28,u,w=d+32,x,y,A,B=d+36,H=d+40,C=d+44,D,E,F;e=c;D=0;HEAP[s]=1;HEAP[t]=0;e=_PyArg_ParseTuple(e,U,allocate([j,0,0,0,l,0,0,0,m,0,0,0,n,0,0,0,p,0,0,0,r,0,0,0,B,0,0,0,s,0,0,0,t,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",
0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"%struct.PyObject**",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;e=78;break;case 2:e=b(HEAP[m])==0?3:4;break;case 3:h=0;e=78;break;case 4:e=HEAP[n]<=0?5:6;break;case 5:_PyErr_SetString(HEAP[o],z);h=0;e=78;break;case 6:E=HEAP[n]*HEAP[m];e=(E/HEAP[n]|0)!=HEAP[m]?7:8;break;case 7:_PyErr_SetString(HEAP[_PyExc_OverflowError],aa);h=0;e=78;break;case 8:e=HEAP[s]<=0?10:9;break;case 9:e=HEAP[t]<0?10:11;break;case 10:_PyErr_SetString(HEAP[o],
ja);h=0;e=78;break;case 11:e=HEAP[l]%E!=0?12:13;break;case 12:_PyErr_SetString(HEAP[o],q);h=0;e=78;break;case 13:e=HEAP[p]<=0?15:14;break;case 14:e=HEAP[r]<=0?15:16;break;case 15:_PyErr_SetString(HEAP[o],la);h=0;e=78;break;case 16:a:{e=HEAP[p];for(var G=HEAP[r],K=void 0,I=null,K=-1;;)switch(K){case -1:var J,K=e;J=G;var R=K;G>0?(I=-1,K=1):(I=-1,K=2);break;case 1:I=(I==1?P:R)%J;K=J;J=I;var P=K;I>0?K=I=1:(I=1,K=2);break;case 2:e=I==-1?R:P;break a;default:assert(0,"bad label: "+K)}e=void 0}HEAP[w]=e;
HEAP[p]=HEAP[p]/HEAP[w]|0;HEAP[r]=HEAP[r]/HEAP[w]|0;e=HEAP[n]>1073741823?17:18;break;case 17:_PyErr_SetString(HEAP[_PyExc_MemoryError],L);h=0;e=78;break;case 18:x=_malloc(HEAP[n]*4);y=_malloc(HEAP[n]*4);e=x==0?20:19;break;case 19:e=y==0?20:21;break;case 20:_PyErr_NoMemory();e=73;break;case 21:HEAP[l]=HEAP[l]/E|0;e=HEAP[B]==__Py_NoneStruct?22:24;break;case 22:HEAP[w]=0-HEAP[r];u=0;e=u<HEAP[n]?23:31;break;case 23:HEAP[y+4*u]=0;HEAP[x+4*u]=HEAP[y+4*u];u+=1;e=u<HEAP[n]?23:31;break;case 24:e=_PyArg_ParseTuple(HEAP[B],
da,allocate([w,0,0,0,_PyTuple_Type,0,0,0,H,0,0,0],["i32*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject**",0,0,0],ALLOC_STACK))==0?73:25;break;case 25:e=_PyTuple_Size(HEAP[H])!=HEAP[n]?26:27;break;case 26:_PyErr_SetString(HEAP[o],Ka);e=73;break;case 27:u=0;e=30;break;case 28:e=y+4*u;G=x+4*u;K=_PyTuple_GetItem(HEAP[H],u);e=_PyArg_ParseTuple(K,Ma,allocate([G,0,0,0,e,0,0,0],["i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?73:29;break;case 29:u+=1;e=30;break;case 30:e=u<HEAP[n]?28:31;break;case 31:e=
HEAP[l]>0?32:33;break;case 32:g=((HEAP[l]-1)/HEAP[p]|0)+1;e=34;break;case 33:g=0;e=34;break;case 34:F=g;e=((2147483647/F|0)/E|0)<HEAP[r]?35:36;break;case 35:HEAP[C]=0;e=37;break;case 36:e=_PyString_FromStringAndSize(0,F*HEAP[r]*E);HEAP[C]=e;e=e==0?37:38;break;case 37:_PyErr_SetString(HEAP[_PyExc_MemoryError],L);e=73;break;case 38:k=_PyString_AsString(HEAP[C]);var N=HEAP[w],f=38;e=62;break;case 39:e=HEAP[l]==0?40:53;break;case 40:e=_PyTuple_New(HEAP[n]);HEAP[H]=e;e=HEAP[H]==0?73:41;break;case 41:u=
0;e=u<HEAP[n]?42:43;break;case 42:e=_Py_BuildValue(v,allocate([HEAP[x+4*u],0,0,0,HEAP[y+4*u],0,0,0],["i32",0,0,0,"i32",0,0,0],ALLOC_STACK));_PyTuple_SetItem(HEAP[H],u,e);u+=1;e=u<HEAP[n]?42:43;break;case 43:e=_PyErr_Occurred()!=0?73:44;break;case 44:e=k;G=_PyString_AsString(HEAP[C]);HEAP[l]=e-G;e=HEAP[l]==0?45:48;break;case 45:D=_PyString_FromStringAndSize(wa,0);e=HEAP[C];HEAP[e]-=1;e=HEAP[e]==0?46:47;break;case 46:FUNCTION_TABLE[HEAP[HEAP[HEAP[C]+4]+24]](HEAP[C]);e=47;break;case 47:HEAP[C]=D;e=49;
break;case 48:e=__PyString_Resize(C,HEAP[l])<0?73:49;break;case 49:D=_Py_BuildValue(ib,allocate([HEAP[C],0,0,0,HEAP[w],0,0,0,HEAP[H],0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));e=HEAP[H];HEAP[e]-=1;e=HEAP[e]==0?50:51;break;case 50:FUNCTION_TABLE[HEAP[HEAP[HEAP[H]+4]+24]](HEAP[H]);e=51;break;case 51:e=HEAP[C];HEAP[e]-=1;e=HEAP[e]==0?52:73;break;case 52:FUNCTION_TABLE[HEAP[HEAP[HEAP[C]+4]+24]](HEAP[C]);e=73;break;case 53:u=0;e=u<HEAP[n]?54:61;break;case 54:HEAP[x+
4*u]=HEAP[y+4*u];e=HEAP[m]==1?55:56;break;case 55:HEAP[y+4*u]=HEAP[HEAP[j]]<<8;e=60;break;case 56:e=HEAP[m]==2?57:58;break;case 57:HEAP[y+4*u]=HEAP[HEAP[j]];e=60;break;case 58:e=HEAP[m]==4?59:60;break;case 59:HEAP[y+4*u]=HEAP[HEAP[j]]>>16;e=60;break;case 60:HEAP[j]+=HEAP[m];HEAP[y+4*u]=(HEAP[t]*HEAP[x+4*u]+HEAP[s]*HEAP[y+4*u])/(HEAP[t]+HEAP[s])|0;u+=1;e=u<HEAP[n]?54:61;break;case 61:HEAP[l]-=1;var O=HEAP[r]+HEAP[w];HEAP[w]=O;f=61;e=62;break;case 62:e=(f==38?N:f==61?O:f==72?S:Q)<0?39:72;break;case 63:u=
0;e=u<HEAP[n]?64:71;break;case 64:A=((HEAP[r]-HEAP[w])*HEAP[y+4*u]+HEAP[w]*HEAP[x+4*u])/HEAP[r]|0;e=HEAP[m]==1?65:66;break;case 65:HEAP[k]=A>>8&255;e=70;break;case 66:e=HEAP[m]==2?67:68;break;case 67:HEAP[k]=A&65535;e=70;break;case 68:e=HEAP[m]==4?69:70;break;case 69:HEAP[k]=A<<16;e=70;break;case 70:k+=HEAP[m];u+=1;e=u<HEAP[n]?64:71;break;case 71:var Q=HEAP[w]-HEAP[p];HEAP[w]=Q;Q>=0?(f=71,e=63):(f=71,e=62);break;case 72:var S=HEAP[w];S>=0?(f=72,e=63):(f=72,e=62);break;case 73:e=x!=0?74:75;break;case 74:_free(x);
e=75;break;case 75:e=y!=0?76:77;break;case 76:_free(y);e=77;break;case 77:h=D;e=78;break;case 78:return f=h,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0]);f.run=d;d();return f});