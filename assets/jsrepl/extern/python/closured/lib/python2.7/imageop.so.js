(function(g){function e(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;c=a;d=b;c=c>0?1:2;break;case 1:e=1;c=3;break;case 2:_PyErr_Format(HEAP[_PyExc_ValueError],h,allocate([d,0,0,0],["i8*",0,0,0],ALLOC_STACK));e=0;c=3;break;case 3:return d=e;default:assert(0,"bad label: "+c)}}function b(a,b,c,d,f,g){var h;for(h=-1;;)switch(h){case -1:var l,m,n,o,p,q;l=a;m=b;h=c;n=d;o=f;p=g;h=e(m,h)==0?1:2;break;case 1:q=0;h=7;break;case 2:h=e(n,o)==0?3:
4;break;case 3:q=0;h=7;break;case 4:h=((l/n|0)/m|0)==p?5:6;break;case 5:q=1;h=7;break;case 6:_PyErr_SetString(HEAP[j],k);q=0;h=7;break;case 7:return a=q;default:assert(0,"bad label: "+h)}}function a(a,c,d){return b(a,c,l,d,m,1)}function c(){var a;for(a=-1;;)switch(a){case -1:var b,c,d;a=HEAP[n]==0?1:2;break;case 1:b=1;a=12;break;case 2:a=HEAP[o]==0?3:5;break;case 3:a=_PyString_FromString(p);HEAP[o]=a;a=HEAP[o]==0?4:5;break;case 4:b=1;a=12;break;case 5:c=a=_PyDict_GetItem(HEAP[n],HEAP[o]);a=a==0?6:
7;break;case 6:b=1;a=12;break;case 7:a=(HEAP[HEAP[c+4]+84]&8388608)==0?8:9;break;case 8:b=1;a=12;break;case 9:d=_PyInt_AsLong(c);a=_PyErr_Occurred()!=0?10:11;break;case 10:_PyErr_Clear();d=1;a=11;break;case 11:b=d!=0;a=12;break;case 12:return b;default:assert(0,"bad label: "+a)}}function d(){h=allocate([37,115,32,118,97,108,117,101,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,110,117,108,0],"i8",ALLOC_NORMAL);j=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);k=allocate([83,116,114,105,
110,103,32,104,97,115,32,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,0],"i8",ALLOC_NORMAL);l=allocate([120,0],"i8",ALLOC_NORMAL);m=allocate([121,0],"i8",ALLOC_NORMAL);n=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);o=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);p=allocate([98,97,99,107,119,97,114,100,95,99,111,109,112,97,116,105,98,108,101,0],"i8",ALLOC_NORMAL);q=allocate([115,35,105,105,105,105,105,105,105,0],"i8",ALLOC_NORMAL);r=allocate([83,105,122,101,32,115,104,111,117,108,100,
32,98,101,32,49,44,32,50,32,111,114,32,52,0],"i8",ALLOC_NORMAL);t=allocate([97,98,115,40,110,101,119,120,50,45,110,101,119,120,49,41,43,49,0],"i8",ALLOC_NORMAL);s=allocate([97,98,115,40,110,101,119,121,50,45,110,101,119,121,49,41,43,49,0],"i8",ALLOC_NORMAL);u=allocate([115,35,105,105,105,105,105,0],"i8",ALLOC_NORMAL);v=allocate([110,101,119,120,0],"i8",ALLOC_NORMAL);w=allocate([110,101,119,121,0],"i8",ALLOC_NORMAL);x=allocate([115,35,105,105,105,0],"i8",ALLOC_NORMAL);y=allocate([83,105,122,101,32,
115,104,111,117,108,100,32,98,101,32,49,32,111,114,32,52,0],"i8",ALLOC_NORMAL);B=allocate([109,97,120,0],"i8",ALLOC_NORMAL);A=allocate([109,97,120,121,0],"i8",ALLOC_NORMAL);C=allocate([115,35,105,105,0],"i8",ALLOC_NORMAL);G=allocate([115,35,105,105,105,105,0],"i8",ALLOC_NORMAL);F=allocate([99,114,111,112,0],"i8",ALLOC_NORMAL);E=allocate([115,99,97,108,101,0],"i8",ALLOC_NORMAL);N=allocate([103,114,101,121,50,109,111,110,111,0],"i8",ALLOC_NORMAL);Q=allocate([103,114,101,121,50,103,114,101,121,50,0],
"i8",ALLOC_NORMAL);I=allocate([103,114,101,121,50,103,114,101,121,52,0],"i8",ALLOC_NORMAL);J=allocate([100,105,116,104,101,114,50,109,111,110,111,0],"i8",ALLOC_NORMAL);P=allocate([100,105,116,104,101,114,50,103,114,101,121,50,0],"i8",ALLOC_NORMAL);D=allocate([109,111,110,111,50,103,114,101,121,0],"i8",ALLOC_NORMAL);T=allocate([103,114,101,121,50,50,103,114,101,121,0],"i8",ALLOC_NORMAL);L=allocate([103,114,101,121,52,50,103,114,101,121,0],"i8",ALLOC_NORMAL);$=allocate([116,111,118,105,100,101,111,
0],"i8",ALLOC_NORMAL);R=allocate([114,103,98,50,114,103,98,56,0],"i8",ALLOC_NORMAL);K=allocate([114,103,98,56,50,114,103,98,0],"i8",ALLOC_NORMAL);H=allocate([114,103,98,50,103,114,101,121,0],"i8",ALLOC_NORMAL);S=allocate([103,114,101,121,50,114,103,98,0],"i8",ALLOC_NORMAL);U=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8",
"i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);
z=allocate([116,104,101,32,105,109,97,103,101,111,112,32,109,111,100,117,108,101,32,104,97,115,32,98,101,101,110,32,114,101,109,111,118,101,100,32,105,110,32,80,121,116,104,111,110,32,51,46,48,0],"i8",ALLOC_NORMAL);aa=allocate([105,109,97,103,101,111,112,0],"i8",ALLOC_NORMAL);ja=allocate([105,109,97,103,101,111,112,46,101,114,114,111,114,0],"i8",ALLOC_NORMAL);la=allocate([101,114,114,111,114,0],"i8",ALLOC_NORMAL);HEAP[U]=F;HEAP[U+4]=g+2;HEAP[U+16]=E;HEAP[U+20]=g+4;HEAP[U+32]=N;HEAP[U+36]=g+6;HEAP[U+
48]=Q;HEAP[U+52]=g+8;HEAP[U+64]=I;HEAP[U+68]=g+10;HEAP[U+80]=J;HEAP[U+84]=g+12;HEAP[U+96]=P;HEAP[U+100]=g+14;HEAP[U+112]=D;HEAP[U+116]=g+16;HEAP[U+128]=T;HEAP[U+132]=g+18;HEAP[U+144]=L;HEAP[U+148]=g+20;HEAP[U+160]=$;HEAP[U+164]=g+22;HEAP[U+176]=R;HEAP[U+180]=g+24;HEAP[U+192]=K;HEAP[U+196]=g+26;HEAP[U+208]=H;HEAP[U+212]=g+28;HEAP[U+224]=S;HEAP[U+228]=g+30}var f={arguments:[]};Runtime.QUANTUM_SIZE=4;var h,j,k,l,m,n,o,p,q,r,t,s,u,v,w,x,y,B,A,C,G,F,E,N,Q,I,J,P,D,T,L,$,R,K,H,S,U,z,aa,ja,la;f._initimageop=
function(){var a;for(a=-1;;)switch(a){case -1:var b;a=HEAP[_Py_Py3kWarningFlag]!=0?1:2;break;case 1:a=_PyErr_WarnEx(HEAP[_PyExc_DeprecationWarning],z,2)<0?5:2;break;case 2:b=a=_Py_InitModule4(aa,U,0,0,1013);a=a==0?5:3;break;case 3:a=_PyModule_GetDict(b);HEAP[n]=a;a=_PyErr_NewException(ja,0,0);HEAP[j]=a;a=HEAP[j]!=0?4:5;break;case 4:_PyDict_SetItemString(HEAP[n],la,HEAP[j]);a=5;break;case 5:return;default:assert(0,"bad label: "+a)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,function(a,c){var d=STACKTOP;
STACKTOP+=36;_memset(d,0,36);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h,k,n=d,o,p,u,v=d+4,w=d+8,x=d+12,D=d+16,y=d+20,H=d+24,z=d+28,K=d+32,A,B,C,E,R,F;e=_PyArg_ParseTuple(c,q,allocate([n,0,0,0,v,0,0,0,w,0,0,0,x,0,0,0,D,0,0,0,y,0,0,0,z,0,0,0,H,0,0,0,K,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:k=0;e=33;break;case 2:e=HEAP[w]!=1&HEAP[w]!=2&HEAP[w]!=4?3:4;break;case 3:_PyErr_SetString(HEAP[j],
r);k=0;e=33;break;case 4:e=b(HEAP[v],HEAP[x],l,HEAP[D],m,HEAP[w])==0?5:6;break;case 5:k=0;e=33;break;case 6:e=HEAP[y]<HEAP[H]?7:8;break;case 7:h=1;e=9;break;case 8:h=-1;e=9;break;case 9:E=h;e=HEAP[z]<HEAP[K]?10:11;break;case 10:g=1;e=12;break;case 11:g=-1;e=12;break;case 12:R=g;A=((HEAP[H]-HEAP[y]>=0?HEAP[H]-HEAP[y]:0-(HEAP[H]-HEAP[y]))+1)*HEAP[w]*((HEAP[K]-HEAP[z]>=0?HEAP[K]-HEAP[z]:0-(HEAP[K]-HEAP[z]))+1);e=b(A,(HEAP[H]-HEAP[y]>=0?HEAP[H]-HEAP[y]:0-(HEAP[H]-HEAP[y]))+1,t,(HEAP[K]-HEAP[z]>=0?HEAP[K]-
HEAP[z]:0-(HEAP[K]-HEAP[z]))+1,s,HEAP[w])==0?13:14;break;case 13:k=0;e=33;break;case 14:F=_PyString_FromStringAndSize(0,A);e=F==0?15:16;break;case 15:k=0;e=33;break;case 16:u=p=o=_PyString_AsString(F);HEAP[K]=R+HEAP[K];HEAP[H]=E+HEAP[H];C=HEAP[z];e=C!=HEAP[K]?17:32;break;case 17:B=HEAP[y];var J=C;B!=HEAP[H]?(f=17,e=18):(f=17,e=31);break;case 18:e=(f==30?P:J)<0?22:19;break;case 19:e=C>=HEAP[D]?22:20;break;case 20:e=B<0?22:21;break;case 21:e=B>=HEAP[x]?22:25;break;case 22:e=HEAP[w]==1?23:24;break;case 23:HEAP[o]=
0;o+=1;e=30;break;case 24:HEAP[u]=0;u+=4;e=30;break;case 25:e=HEAP[w]==1?26:27;break;case 26:HEAP[o]=HEAP[HEAP[n]+C*HEAP[x]+B];o+=1;e=30;break;case 27:var G=HEAP[n],L=C*HEAP[x]+B;e=HEAP[w]==2?28:29;break;case 28:HEAP[p]=HEAP[G+L*2];p+=2;e=30;break;case 29:HEAP[u]=HEAP[G+L*4];u+=4;e=30;break;case 30:B=E+B;var P=C;B!=HEAP[H]?(f=30,e=18):(f=30,e=31);break;case 31:C=R+(f==17?J:P);e=C!=HEAP[K]?17:32;break;case 32:k=F;e=33;break;case 33:return e=k,STACKTOP=d,e;default:assert(0,"bad label: "+e)}},0,function(a,
c){var d=STACKTOP;STACKTOP+=28;_memset(d,0,28);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h,k,n,o=d+4,p=d+8,q=d+12,s=d+16,t=d+20,x=d+24,D,y,H,z,K,A;e=_PyArg_ParseTuple(c,u,allocate([g,0,0,0,o,0,0,0,p,0,0,0,q,0,0,0,s,0,0,0,t,0,0,0,x,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=20;break;case 2:e=HEAP[p]!=1&HEAP[p]!=2&HEAP[p]!=4?3:4;break;case 3:_PyErr_SetString(HEAP[j],r);f=0;e=20;break;case 4:e=b(HEAP[o],
HEAP[q],l,HEAP[s],m,HEAP[p])==0?5:6;break;case 5:f=0;e=20;break;case 6:D=HEAP[x]*HEAP[t]*HEAP[p];e=b(D,HEAP[t],v,HEAP[x],w,HEAP[p])==0?7:8;break;case 7:f=0;e=20;break;case 8:A=_PyString_FromStringAndSize(0,D);e=A==0?9:10;break;case 9:f=0;e=20;break;case 10:n=k=h=_PyString_AsString(A);H=0;e=H<HEAP[x]?11:19;break;case 11:y=0;e=y<HEAP[t]?12:18;break;case 12:z=y*HEAP[q]/HEAP[t]|0;K=H*HEAP[s]/HEAP[x]|0;e=HEAP[p]==1?13:14;break;case 13:HEAP[h]=HEAP[HEAP[g]+K*HEAP[q]+z];h+=1;e=17;break;case 14:var B=HEAP[g],
C=K*HEAP[q]+z;e=HEAP[p]==2?15:16;break;case 15:HEAP[k]=HEAP[B+C*2];k+=2;e=17;break;case 16:HEAP[n]=HEAP[B+C*4];n+=4;e=17;break;case 17:y+=1;e=y<HEAP[t]?12:18;break;case 18:H+=1;e=H<HEAP[x]?11:19;break;case 19:f=A;e=20;break;case 20:return e=f,STACKTOP=d,e;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=20;_memset(d,0,20);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k=d+12,l=d+16,m,n,o,p,q;e=_PyArg_ParseTuple(c,x,allocate([l,0,0,0,k,0,0,0,h,0,0,0,j,0,0,0,g,
0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=15;break;case 2:e=a(HEAP[k],HEAP[h],HEAP[j])==0?3:4;break;case 3:f=0;e=15;break;case 4:o=_PyString_FromStringAndSize(0,(HEAP[k]+7)/8|0);e=o==0?5:6;break;case 5:f=0;e=15;break;case 6:m=_PyString_AsString(o);q=128;p=n=0;e=p<HEAP[k]?7:12;break;case 7:e=HEAP[HEAP[l]+p]>HEAP[g]?8:9;break;case 8:n|=q&255;e=9;break;case 9:q=e=q>>1;e=e==0?10:11;break;case 10:HEAP[m]=n;m+=1;q=128;n=0;e=11;break;
case 11:p+=1;e=p<HEAP[k]?7:12;break;case 12:e=q!=128?13:14;break;case 13:HEAP[m]=n;m+=1;e=14;break;case 14:f=o;e=15;break;case 15:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k=d+12,l,m,n,o,p;e=_PyArg_ParseTuple(c,C,allocate([k,0,0,0,j,0,0,0,g,0,0,0,h,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=13;break;case 2:e=a(HEAP[j],
HEAP[g],HEAP[h])==0?3:4;break;case 3:f=0;e=13;break;case 4:n=_PyString_FromStringAndSize(0,(HEAP[j]+3)/4|0);e=n==0?5:6;break;case 5:f=0;e=13;break;case 6:l=_PyString_AsString(n);o=m=p=0;e=o<HEAP[j]?7:10;break;case 7:m|=(HEAP[HEAP[k]+o]&192)>>p&255;p=e=p+2;e=e==8?8:9;break;case 8:HEAP[l]=m;l+=1;p=m=0;e=9;break;case 9:o+=1;e=o<HEAP[j]?7:10;break;case 10:e=p!=0?11:12;break;case 11:HEAP[l]=m;l+=1;e=12;break;case 12:f=n;e=13;break;case 13:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,
c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k=d+12,l,m,n,o,p;e=_PyArg_ParseTuple(c,C,allocate([k,0,0,0,j,0,0,0,g,0,0,0,h,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=13;break;case 2:e=a(HEAP[j],HEAP[g],HEAP[h])==0?3:4;break;case 3:f=0;e=13;break;case 4:n=_PyString_FromStringAndSize(0,(HEAP[j]+1)/2|0);e=n==0?5:6;break;case 5:f=0;e=13;break;case 6:l=_PyString_AsString(n);o=m=p=0;e=o<HEAP[j]?
7:10;break;case 7:m|=(HEAP[HEAP[k]+o]&240)>>p&255;p=e=p+4;e=e==8?8:9;break;case 8:HEAP[l]=m;l+=1;p=m=0;e=9;break;case 9:o+=1;e=o<HEAP[j]?7:10;break;case 10:e=p!=0?11:12;break;case 11:HEAP[l]=m;l+=1;e=12;break;case 12:f=n;e=13;break;case 13:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e;for(e=-1;;)switch(e){case -1:var f,g,h=d,j=d+4,k=d+8,l=d+12,m,n,o,p,q;e=_PyArg_ParseTuple(c,C,allocate([l,0,0,0,k,0,0,0,h,0,0,0,j,0,0,0],["i8**",
0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=15;break;case 2:e=a(HEAP[k],HEAP[h],HEAP[j])==0?3:4;break;case 3:f=0;e=15;break;case 4:o=_PyString_FromStringAndSize(0,(HEAP[k]+7)/8|0);e=o==0?5:6;break;case 5:f=0;e=15;break;case 6:m=_PyString_AsString(o);q=128;p=g=n=0;e=p<HEAP[k]?7:12;break;case 7:g=e=HEAP[HEAP[l]+p]+g;e=e>255?8:9;break;case 8:g-=256;n|=q&255;e=9;break;case 9:q=e=q>>1;e=e==0?10:11;break;case 10:HEAP[m]=n;m+=1;q=128;n=0;e=11;break;case 11:p+=1;
e=p<HEAP[k]?7:12;break;case 12:e=q!=128?13:14;break;case 13:HEAP[m]=n;m+=1;e=14;break;case 14:f=o;e=15;break;case 15:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,j=d+8,k=d+12,l,m,n,o,p,q;e=c;q=0;e=_PyArg_ParseTuple(e,C,allocate([k,0,0,0,j,0,0,0,g,0,0,0,h,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=13;break;case 2:e=a(HEAP[j],
HEAP[g],HEAP[h])==0?3:4;break;case 3:f=0;e=13;break;case 4:n=_PyString_FromStringAndSize(0,(HEAP[j]+3)/4|0);e=n==0?5:6;break;case 5:f=0;e=13;break;case 6:l=_PyString_AsString(n);p=1;o=m=0;e=o<HEAP[j]?7:10;break;case 7:q=HEAP[HEAP[k]+o]+q;e=q&384;q-=e;m|=e>>p&255;p=e=p+2;e=e==9?8:9;break;case 8:HEAP[l]=m;l+=1;m=0;p=1;e=9;break;case 9:o+=1;e=o<HEAP[j]?7:10;break;case 10:e=p!=0?11:12;break;case 11:HEAP[l]=m;l+=1;e=12;break;case 12:f=n;e=13;break;case 13:return STACKTOP=d,f;default:assert(0,"bad label: "+
e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=24;_memset(d,0,24);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,l=d+8,m=d+12,n=d+16,o,p=d+20,q,r,s,t;e=_PyArg_ParseTuple(c,G,allocate([p,0,0,0,n,0,0,0,l,0,0,0,m,0,0,0,g,0,0,0,h,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=16;break;case 2:o=HEAP[m]*HEAP[l];e=a(o,HEAP[l],HEAP[m])==0?3:4;break;case 3:f=0;e=16;break;case 4:e=((o+7)/8|0)!=HEAP[n]?5:6;break;case 5:_PyErr_SetString(HEAP[j],
k);f=0;e=16;break;case 6:r=_PyString_FromStringAndSize(0,o);e=r==0?7:8;break;case 7:f=0;e=16;break;case 8:q=_PyString_AsString(r);t=128;s=0;e=s<o?9:15;break;case 9:e=(HEAP[HEAP[p]]&t)!=0?10:11;break;case 10:HEAP[q]=HEAP[h]&255;q+=1;e=12;break;case 11:HEAP[q]=HEAP[g]&255;q+=1;e=12;break;case 12:t=e=t>>1;e=e==0?13:14;break;case 13:t=128;HEAP[p]+=1;e=14;break;case 14:s+=1;e=s<o?9:15;break;case 15:f=r;e=16;break;case 16:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;
STACKTOP+=16;_memset(d,0,16);var e,f=null;for(e=-1;;)switch(e){case -1:var g,h=d,l=d+4,m=d+8,n,o=d+12,p,q,r,s,t;e=c;t=0;e=_PyArg_ParseTuple(e,C,allocate([o,0,0,0,m,0,0,0,h,0,0,0,l,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=14;break;case 2:n=HEAP[l]*HEAP[h];e=a(n,HEAP[h],HEAP[l])==0?3:4;break;case 3:g=0;e=14;break;case 4:e=((n+3)/4|0)!=HEAP[m]?5:6;break;case 5:_PyErr_SetString(HEAP[j],k);g=0;e=14;break;case 6:q=_PyString_FromStringAndSize(0,
n);e=q==0?7:8;break;case 7:g=0;e=14;break;case 8:p=_PyString_AsString(q);r=s=0;r<n?(f=8,e=10):(f=8,e=13);break;case 9:var u=s,f=9;e=10;break;case 10:e=(f==9?u:0)==0?11:12;break;case 11:s=HEAP[o];t=HEAP[s];HEAP[o]=s+1;s=8;e=12;break;case 12:s-=2;e=t>>s&3;HEAP[p]=e<<2&255|e&255|e<<4&255|e<<6&255;p+=1;r+=1;e=r<n?9:13;break;case 13:g=q;e=14;break;case 14:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(b,c){var d=STACKTOP;STACKTOP+=16;_memset(d,0,16);var e,f=null;for(e=-1;;)switch(e){case -1:var g,
h=d,l=d+4,m=d+8,n,o=d+12,p,q,r,s,t;e=c;t=0;e=_PyArg_ParseTuple(e,C,allocate([o,0,0,0,m,0,0,0,h,0,0,0,l,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=14;break;case 2:n=HEAP[l]*HEAP[h];e=a(n,HEAP[h],HEAP[l])==0?3:4;break;case 3:g=0;e=14;break;case 4:e=((n+1)/2|0)!=HEAP[m]?5:6;break;case 5:_PyErr_SetString(HEAP[j],k);g=0;e=14;break;case 6:q=_PyString_FromStringAndSize(0,n);e=q==0?7:8;break;case 7:g=0;e=14;break;case 8:p=_PyString_AsString(q);r=s=
0;r<n?(f=8,e=10):(f=8,e=13);break;case 9:var u=s,f=9;e=10;break;case 10:e=(f==9?u:0)==0?11:12;break;case 11:s=HEAP[o];t=HEAP[s];HEAP[o]=s+1;s=8;e=12;break;case 12:s-=4;e=t>>s&15;HEAP[p]=e<<4&255|e&255;p+=1;r+=1;e=r<n?9:13;break;case 13:g=q;e=14;break;case 14:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(a,c){var d=STACKTOP;STACKTOP+=20;_memset(d,0,20);var e;for(e=-1;;)switch(e){case -1:var f,g=d,h=d+4,k,l,m=d+8,n=d+12,o,p=d+16,q;e=_PyArg_ParseTuple(c,x,allocate([n,0,0,0,m,
0,0,0,p,0,0,0,g,0,0,0,h,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:f=0;e=18;break;case 2:e=HEAP[p]!=1&HEAP[p]!=4?3:4;break;case 3:_PyErr_SetString(HEAP[j],y);f=0;e=18;break;case 4:e=b(HEAP[m],HEAP[g],B,HEAP[h],A,HEAP[p])==0?5:6;break;case 5:f=0;e=18;break;case 6:q=_PyString_FromStringAndSize(0,HEAP[m]);e=q==0?7:8;break;case 7:f=0;e=18;break;case 8:o=_PyString_AsString(q);var r=HEAP[g];e=HEAP[p]==1?9:13;break;case 9:_llvm_memcpy_p0i8_p0i8_i32(o,
HEAP[n],r,1,0);o+=HEAP[g];l=1;e=l<HEAP[h]?10:17;break;case 10:k=0;e=k<HEAP[g]?11:12;break;case 11:e=l*HEAP[g]+k;HEAP[o]=HEAP[HEAP[n]+(e-HEAP[g])]+HEAP[HEAP[n]+e]>>1&255;o+=1;k+=1;e=k<HEAP[g]?11:12;break;case 12:l+=1;e=l<HEAP[h]?10:17;break;case 13:_llvm_memcpy_p0i8_p0i8_i32(o,HEAP[n],r*4,1,0);o+=HEAP[g]*4;l=1;e=l<HEAP[h]?14:17;break;case 14:k=0;e=k<HEAP[g]?15:16;break;case 15:e=(l*HEAP[g]+k)*4+1;HEAP[o]=0;o+=1;HEAP[o]=HEAP[HEAP[n]+(e-HEAP[g]*4)]+HEAP[HEAP[n]+e]>>1&255;o+=1;e+=1;HEAP[o]=HEAP[HEAP[n]+
(e-HEAP[g]*4)]+HEAP[HEAP[n]+e]>>1&255;o+=1;e+=1;HEAP[o]=HEAP[HEAP[n]+(e-HEAP[g]*4)]+HEAP[HEAP[n]+e]>>1&255;o+=1;k+=1;e=k<HEAP[g]?15:16;break;case 16:l+=1;e=l<HEAP[h]?14:17;break;case 17:f=q;e=18;break;case 18:return STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(d,e){var f=STACKTOP;STACKTOP+=16;_memset(f,0,16);var g;for(g=-1;;)switch(g){case -1:var h,j=f,k=f+4,n=f+8,o,p=f+12,q,r,s,t,u,v,w;g=e;w=c();g=_PyArg_ParseTuple(g,C,allocate([p,0,0,0,n,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",
0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;g=14;break;case 2:g=b(HEAP[n],HEAP[j],l,HEAP[k],m,4)==0?3:4;break;case 3:h=0;g=14;break;case 4:o=HEAP[k]*HEAP[j];g=a(o,HEAP[j],HEAP[k])==0?5:6;break;case 5:h=0;g=14;break;case 6:r=_PyString_FromStringAndSize(0,o);g=r==0?7:8;break;case 7:h=0;g=14;break;case 8:q=_PyString_AsString(r);s=0;g=s<o?9:13;break;case 9:var x=HEAP[p];g=w!=0?10:11;break;case 10:v=HEAP[x];HEAP[p]+=4;t=(v&255)/255*7+0.5|0;u=(v>>>8&255)/255*7+0.5|0;v=(v>>>16&
255)/255*3+0.5|0;g=12;break;case 11:HEAP[p]=x+1;u=HEAP[p];v=HEAP[u]/255*3+0.5|0;HEAP[p]=u+1;t=HEAP[p];u=HEAP[t]/255*7+0.5|0;HEAP[p]=t+1;g=HEAP[p];t=HEAP[g]/255*7+0.5|0;HEAP[p]=g+1;g=12;break;case 12:HEAP[q]=u&255|t<<5&255|v<<3&255;q+=1;s+=1;g=s<o?9:13;break;case 13:h=r;g=14;break;case 14:return STACKTOP=f,h;default:assert(0,"bad label: "+g)}},0,function(d,e){var f=STACKTOP;STACKTOP+=16;_memset(f,0,16);var g;for(g=-1;;)switch(g){case -1:var h,j=f,k=f+4,n=f+8,o,p=f+12,q,r,s,t,u,v,w;g=e;w=c();g=_PyArg_ParseTuple(g,
C,allocate([p,0,0,0,n,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;g=14;break;case 2:g=a(HEAP[n],HEAP[j],HEAP[k])==0?3:4;break;case 3:h=0;g=14;break;case 4:o=HEAP[j]*4*HEAP[k];g=b(o,HEAP[j],l,HEAP[k],m,4)==0?5:6;break;case 5:h=0;g=14;break;case 6:r=_PyString_FromStringAndSize(0,o);g=r==0?7:8;break;case 7:h=0;g=14;break;case 8:q=_PyString_AsString(r);s=0;g=s<HEAP[n]?9:13;break;case 9:t=HEAP[p];v=HEAP[t];HEAP[p]=t+1;t=v>>>5&7;u=v&
7;v=v>>>3&3;t=t<<3|t<<5|t>>1;u=u<<3|u<<5|u>>1;v=v<<4|v<<6|v|v<<2;g=w!=0?10:11;break;case 10:g=u<<8|t|v<<16;HEAP[q]=g;q+=4;g=12;break;case 11:HEAP[q]=0;q+=1;HEAP[q]=v&255;q+=1;HEAP[q]=u&255;q+=1;HEAP[q]=t&255;q+=1;g=12;break;case 12:s+=1;g=s<HEAP[n]?9:13;break;case 13:h=r;g=14;break;case 14:return STACKTOP=f,h;default:assert(0,"bad label: "+g)}},0,function(d,e){var f=STACKTOP;STACKTOP+=16;_memset(f,0,16);var g;for(g=-1;;)switch(g){case -1:var h,j=f,k=f+4,n=f+8,o,p=f+12,q,r,s,t,u,v,w,x;g=e;x=c();g=
_PyArg_ParseTuple(g,C,allocate([p,0,0,0,n,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;g=16;break;case 2:g=b(HEAP[n],HEAP[j],l,HEAP[k],m,4)==0?3:4;break;case 3:h=0;g=16;break;case 4:o=HEAP[k]*HEAP[j];g=a(o,HEAP[j],HEAP[k])==0?5:6;break;case 5:h=0;g=16;break;case 6:r=_PyString_FromStringAndSize(0,o);g=r==0?7:8;break;case 7:h=0;g=16;break;case 8:q=_PyString_AsString(r);s=0;g=s<o?9:15;break;case 9:var D=HEAP[p];g=x!=0?10:11;break;
case 10:v=HEAP[D];HEAP[p]+=4;t=(v&255)/255*7+0.5|0;u=(v>>>8&255)/255*7+0.5|0;v=(v>>>16&255)/255*3+0.5|0;g=12;break;case 11:HEAP[p]=D+1;u=HEAP[p];v=HEAP[u];HEAP[p]=u+1;t=HEAP[p];u=HEAP[t];HEAP[p]=t+1;g=HEAP[p];t=HEAP[g];HEAP[p]=g+1;g=12;break;case 12:w=t*0.3+u*0.59+v*0.11|0;g=(t*0.3+u*0.59+v*0.11|0)>255?13:14;break;case 13:w=255;g=14;break;case 14:HEAP[q]=w&255;q+=1;s+=1;g=s<o?9:15;break;case 15:h=r;g=16;break;case 16:return STACKTOP=f,h;default:assert(0,"bad label: "+g)}},0,function(d,e){var f=STACKTOP;
STACKTOP+=16;_memset(f,0,16);var g;for(g=-1;;)switch(g){case -1:var h,j=f,k=f+4,n=f+8,o,p=f+12,q,r,s,t,u;g=e;u=c();g=_PyArg_ParseTuple(g,C,allocate([p,0,0,0,n,0,0,0,j,0,0,0,k,0,0,0],["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=0;g=14;break;case 2:g=a(HEAP[n],HEAP[j],HEAP[k])==0?3:4;break;case 3:h=0;g=14;break;case 4:o=HEAP[j]*4*HEAP[k];g=b(o,HEAP[j],l,HEAP[k],m,4)==0?5:6;break;case 5:h=0;g=14;break;case 6:r=_PyString_FromStringAndSize(0,o);g=r==0?7:8;break;
case 7:h=0;g=14;break;case 8:q=_PyString_AsString(r);s=0;g=s<HEAP[n]?9:13;break;case 9:var v=HEAP[p];t=HEAP[v];HEAP[p]=v+1;v=q;g=u!=0?10:11;break;case 10:HEAP[v]=t<<8|t|t<<16;q+=4;g=12;break;case 11:HEAP[v]=0;q+=1;HEAP[q]=t;q+=1;HEAP[q]=t;q+=1;HEAP[q]=t;q+=1;g=12;break;case 12:s+=1;g=s<HEAP[n]?9:13;break;case 13:h=r;g=14;break;case 14:return STACKTOP=f,h;default:assert(0,"bad label: "+g)}},0]);f.run=d;d();return f});